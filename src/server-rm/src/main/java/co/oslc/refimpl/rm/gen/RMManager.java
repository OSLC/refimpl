// Start of user code Copyright
/*******************************************************************************
 * Copyright (c) 2011, 2012 IBM Corporation and others.
 *
 *  All rights reserved. This program and the accompanying materials
 *  are made available under the terms of the Eclipse Public License v1.0
 *  and Eclipse Distribution License v. 1.0 which accompanies this distribution.
 *  
 *  The Eclipse Public License is available at http://www.eclipse.org/legal/epl-v10.html
 *  and the Eclipse Distribution License is available at
 *  http://www.eclipse.org/org/documents/edl-v10.php.
 *  
 *  Contributors:
 *  
 *	   Sam Padgett	       - initial API and implementation
 *     Michael Fiedler     - adapted for OSLC4J
 *     Jad El-khoury        - initial implementation of code generator (https://bugs.eclipse.org/bugs/show_bug.cgi?id=422448)
 *     Matthieu Helleboid   - Support for multiple Service Providers.
 *     Anass Radouani       - Support for multiple Service Providers.
 *
 * This file is generated by org.eclipse.lyo.oslc4j.codegenerator
 *******************************************************************************/
// End of user code

package co.oslc.refimpl.rm.gen;

import javax.servlet.http.HttpServletRequest;
import javax.servlet.ServletContextEvent;
import java.util.List;

import org.eclipse.lyo.oslc4j.core.model.ServiceProvider;
import org.eclipse.lyo.oslc4j.core.model.AbstractResource;
import co.oslc.refimpl.rm.gen.servlet.ServiceProviderCatalogSingleton;
import co.oslc.refimpl.rm.gen.ServiceProviderInfo;
import org.eclipse.lyo.oslc.domains.Person;
import org.eclipse.lyo.oslc.domains.rm.Requirement;
import org.eclipse.lyo.oslc.domains.rm.RequirementCollection;


// Start of user code imports
// End of user code

// Start of user code pre_class_code
// End of user code

public class RMManager {

    // Start of user code class_attributes
    // End of user code
    
    
    // Start of user code class_methods
    // End of user code

    public static void contextInitializeServletListener(final ServletContextEvent servletContextEvent)
    {
        
        // Start of user code contextInitializeServletListener
        // TODO Implement code to establish connection to data backbone etc ...
        // End of user code
    }

    public static void contextDestroyServletListener(ServletContextEvent servletContextEvent) 
    {
        
        // Start of user code contextDestroyed
        // TODO Implement code to shutdown connections to data backbone etc...
        // End of user code
    }

    public static ServiceProviderInfo[] getServiceProviderInfos(HttpServletRequest httpServletRequest)
    {
        ServiceProviderInfo[] serviceProviderInfos = {};
        
        // Start of user code "ServiceProviderInfo[] getServiceProviderInfos(...)"
        // TODO Implement code to return the set of ServiceProviders
        // End of user code
        return serviceProviderInfos;
    }

    public static List<Requirement> queryRequirements(HttpServletRequest httpServletRequest, final String serviceProviderId, String where, int page, int limit)
    {
        List<Requirement> resources = null;
        
        // Start of user code queryRequirements
        // TODO Implement code to return a set of resources
        // End of user code
        return resources;
    }
    public static List<Requirement> RequirementSelector(HttpServletRequest httpServletRequest, final String serviceProviderId, String terms)   
    {
        List<Requirement> resources = null;
        
        // Start of user code RequirementSelector
        // TODO Implement code to return a set of resources, based on search criteria 
        // End of user code
        return resources;
    }
    public static Requirement createRequirement(HttpServletRequest httpServletRequest, final Requirement aResource, final String serviceProviderId)
    {
        Requirement newResource = null;
        
        // Start of user code createRequirement
        // TODO Implement code to create a resource
        // End of user code
        return newResource;
    }

    public static Requirement createRequirementFromDialog(HttpServletRequest httpServletRequest, final Requirement aResource, final String serviceProviderId)
    {
        Requirement newResource = null;
        
        // Start of user code createRequirementFromDialog
        // TODO Implement code to create a resource
        // End of user code
        return newResource;
    }

    public static Requirement getRequirement(HttpServletRequest httpServletRequest, final String serviceProviderId, final String requirementId)
    {
        Requirement aResource = null;
        
        // Start of user code getRequirement
        // TODO Implement code to return a resource
        // End of user code
        return aResource;
    }

    public static Boolean deleteRequirement(HttpServletRequest httpServletRequest, final String serviceProviderId, final String requirementId)
    {
        Boolean deleted = false;
        // Start of user code deleteRequirement
        // TODO Implement code to delete a resource
        // End of user code
        return deleted;
    }

    public static Requirement updateRequirement(HttpServletRequest httpServletRequest, final Requirement aResource, final String serviceProviderId, final String requirementId) {
        Requirement updatedResource = null;
        // Start of user code updateRequirement
        // TODO Implement code to update and return a resource
        // End of user code
        return updatedResource;
    }

    public static List<RequirementCollection> queryRequirementCollections(HttpServletRequest httpServletRequest, final String serviceProviderId, String where, int page, int limit)
    {
        List<RequirementCollection> resources = null;
        
        // Start of user code queryRequirementCollections
        // TODO Implement code to return a set of resources
        // End of user code
        return resources;
    }
    public static List<RequirementCollection> RequirementCollectionSelector(HttpServletRequest httpServletRequest, final String serviceProviderId, String terms)   
    {
        List<RequirementCollection> resources = null;
        
        // Start of user code RequirementCollectionSelector
        // TODO Implement code to return a set of resources, based on search criteria 
        // End of user code
        return resources;
    }
    public static RequirementCollection createRequirementCollection(HttpServletRequest httpServletRequest, final RequirementCollection aResource, final String serviceProviderId)
    {
        RequirementCollection newResource = null;
        
        // Start of user code createRequirementCollection
        // TODO Implement code to create a resource
        // End of user code
        return newResource;
    }


    public static RequirementCollection getRequirementCollection(HttpServletRequest httpServletRequest, final String serviceProviderId, final String requirementCollectionId)
    {
        RequirementCollection aResource = null;
        
        // Start of user code getRequirementCollection
        // TODO Implement code to return a resource
        // End of user code
        return aResource;
    }




    public static String getETagFromRequirement(final Requirement aResource)
    {
        String eTag = null;
        // Start of user code getETagFromRequirement
        // TODO Implement code to return an ETag for a particular resource
        // End of user code
        return eTag;
    }
    public static String getETagFromRequirementCollection(final RequirementCollection aResource)
    {
        String eTag = null;
        // Start of user code getETagFromRequirementCollection
        // TODO Implement code to return an ETag for a particular resource
        // End of user code
        return eTag;
    }

}
