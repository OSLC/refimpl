// Start of user code Copyright
/*******************************************************************************
 * Copyright (c) 2012 IBM Corporation and others.
 *
 * All rights reserved. This program and the accompanying materials
 * are made available under the terms of the Eclipse Public License v1.0
 * and Eclipse Distribution License v. 1.0 which accompanies this distribution.
 *
 * The Eclipse Public License is available at http://www.eclipse.org/legal/epl-v10.html
 * and the Eclipse Distribution License is available at
 * http://www.eclipse.org/org/documents/edl-v10.php.
 *
 * Contributors:
 *
 *     Michael Fiedler     - initial API and implementation for Bugzilla adapter
 *     Jad El-khoury       - initial implementation of code generator (https://bugs.eclipse.org/bugs/show_bug.cgi?id=422448)
 *     Jim Amsden          - Support for UI Preview (494303)
 *
 * This file is generated by org.eclipse.lyo.oslc4j.codegenerator
 *******************************************************************************/
// End of user code

package co.oslc.refimpl.cm.gen.services;

import java.io.IOException;
import java.io.PrintWriter;
import java.net.URI;
import java.net.URISyntaxException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Date;
import java.text.SimpleDateFormat;
import java.util.HashSet;
import java.util.List;
import java.util.Set;
import java.util.TreeSet;

import javax.servlet.RequestDispatcher;
import javax.servlet.ServletException;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import javax.ws.rs.Consumes;
import javax.ws.rs.DELETE;
import javax.ws.rs.FormParam;
import javax.ws.rs.GET;
import javax.ws.rs.HeaderParam;
import javax.ws.rs.POST;
import javax.ws.rs.PUT;
import javax.ws.rs.Path;
import javax.ws.rs.PathParam;
import javax.ws.rs.Produces;
import javax.ws.rs.QueryParam;
import javax.ws.rs.WebApplicationException;
import javax.ws.rs.core.Context;
import javax.ws.rs.core.MediaType;
import javax.ws.rs.core.Response;
import javax.ws.rs.core.Response.Status;
import javax.ws.rs.core.UriInfo;
import javax.ws.rs.core.UriBuilder;

import org.apache.wink.json4j.JSONObject;
import org.eclipse.lyo.oslc4j.provider.json4j.JsonHelper;
import org.eclipse.lyo.oslc4j.core.OSLC4JUtils;
import org.eclipse.lyo.oslc4j.core.annotation.OslcCreationFactory;
import org.eclipse.lyo.oslc4j.core.annotation.OslcDialog;
import org.eclipse.lyo.oslc4j.core.annotation.OslcDialogs;
import org.eclipse.lyo.oslc4j.core.annotation.OslcQueryCapability;
import org.eclipse.lyo.oslc4j.core.annotation.OslcService;
import org.eclipse.lyo.oslc4j.core.model.Compact;
import org.eclipse.lyo.oslc4j.core.model.OslcConstants;
import org.eclipse.lyo.oslc4j.core.model.OslcMediaType;
import org.eclipse.lyo.oslc4j.core.model.Preview;
import org.eclipse.lyo.oslc4j.core.model.ServiceProvider;
import org.eclipse.lyo.oslc4j.core.model.Link;
import org.eclipse.lyo.oslc4j.core.model.AbstractResource;

import co.oslc.refimpl.cm.gen.CMManager;
import co.oslc.refimpl.cm.gen.CMConstants;
import org.eclipse.lyo.oslc.domains.cm.Oslc_cmDomainConstants;
import org.eclipse.lyo.oslc.domains.cm.Oslc_cmDomainConstants;
import org.eclipse.lyo.oslc.domains.cm.Oslc_cmDomainConstants;
import org.eclipse.lyo.oslc.domains.cm.Oslc_cmDomainConstants;
import org.eclipse.lyo.oslc.domains.cm.Oslc_cmDomainConstants;
import org.eclipse.lyo.oslc.domains.cm.Oslc_cmDomainConstants;
import org.eclipse.lyo.oslc.domains.cm.Oslc_cmDomainConstants;
import co.oslc.refimpl.cm.gen.servlet.ServiceProviderCatalogSingleton;
import org.eclipse.lyo.oslc.domains.Agent;
import org.eclipse.lyo.oslc.domains.cm.ChangeNotice;
import org.eclipse.lyo.oslc.domains.cm.ChangeRequest;
import org.eclipse.lyo.oslc.domains.config.ChangeSet;
import org.eclipse.lyo.oslc.domains.cm.Defect;
import org.eclipse.lyo.oslc4j.core.model.Discussion;
import org.eclipse.lyo.oslc.domains.cm.Enhancement;
import org.eclipse.lyo.oslc.domains.Person;
import org.eclipse.lyo.oslc.domains.cm.Priority;
import org.eclipse.lyo.oslc.domains.rm.Requirement;
import org.eclipse.lyo.oslc.domains.cm.ReviewTask;
import org.eclipse.lyo.oslc.domains.cm.State;
import org.eclipse.lyo.oslc.domains.cm.Task;

// Start of user code imports
// End of user code

// Start of user code pre_class_code
// End of user code
@OslcService(Oslc_cmDomainConstants.CHANGE_MANAGEMENT_SHAPES_DOMAIN)
@Path("serviceProviders/{serviceProviderId}/resources")
public class Change_requestsService
{
    @Context private HttpServletRequest httpServletRequest;
    @Context private HttpServletResponse httpServletResponse;
    @Context private UriInfo uriInfo;

    // Start of user code class_attributes
    // End of user code

    // Start of user code class_methods
    // End of user code

    public Change_requestsService()
    {
        super();
    }

    private void addCORSHeaders (final HttpServletResponse httpServletResponse) {
        //UI preview can be blocked by CORS policy.
        //add select CORS headers to every response that is embedded in an iframe.
        httpServletResponse.addHeader("Access-Control-Allow-Origin", "*");
        httpServletResponse.addHeader("Access-Control-Allow-Methods", "GET, OPTIONS, HEAD");
        httpServletResponse.addHeader("Access-Control-Allow-Headers", "origin, content-type, accept, authorization");
        httpServletResponse.addHeader("Access-Control-Allow-Credentials", "true");
    }

    @OslcQueryCapability
    (
        title = "QC",
        label = "Query Capability",
        resourceShape = OslcConstants.PATH_RESOURCE_SHAPES + "/" + Oslc_cmDomainConstants.CHANGEREQUEST_PATH,
        resourceTypes = {Oslc_cmDomainConstants.CHANGEREQUEST_TYPE, Oslc_cmDomainConstants.DEFECT_TYPE, Oslc_cmDomainConstants.TASK_TYPE, Oslc_cmDomainConstants.REVIEWTASK_TYPE, Oslc_cmDomainConstants.CHANGENOTICE_TYPE, Oslc_cmDomainConstants.ENHANCEMENT_TYPE},
        usages = {}
    )
    @GET
    @Path("query")
    @Produces({OslcMediaType.APPLICATION_RDF_XML, OslcMediaType.APPLICATION_JSON_LD, OslcMediaType.TEXT_TURTLE, OslcMediaType.APPLICATION_XML, OslcMediaType.APPLICATION_JSON})
    public AbstractResource[] queryChangeRequestsAndDefectsAndTasksAndReviewTasksAndChangeNoticesAndEnhancements(
                                                    @PathParam("serviceProviderId") final String serviceProviderId ,
                                                     @QueryParam("oslc.where") final String where,
                                                     @QueryParam("page") final String pageString,
                                                    @QueryParam("limit") final String limitString) throws IOException, ServletException
    {
        int page=0;
        int limit=20;
        if (null != pageString) {
            page = Integer.parseInt(pageString);
        }
        if (null != limitString) {
            limit = Integer.parseInt(limitString);
        }

        // Start of user code queryChangeRequestsAndDefectsAndTasksAndReviewTasksAndChangeNoticesAndEnhancements
        // Here additional logic can be implemented that complements main action taken in CMManager
        // End of user code

        final List<AbstractResource> resources = CMManager.queryChangeRequestsAndDefectsAndTasksAndReviewTasksAndChangeNoticesAndEnhancements(httpServletRequest, serviceProviderId, where, page, limit);
        return resources.toArray(new AbstractResource [resources.size()]);
    }

    @GET
    @Path("query")
    @Produces({ MediaType.TEXT_HTML })
    public Response queryChangeRequestsAndDefectsAndTasksAndReviewTasksAndChangeNoticesAndEnhancementsAsHtml(
                                    @PathParam("serviceProviderId") final String serviceProviderId ,
                                       @QueryParam("oslc.where") final String where,
                                       @QueryParam("page") final String pageString,
                                    @QueryParam("limit") final String limitString) throws ServletException, IOException
    {
        int page=0;
        int limit=20;
        if (null != pageString) {
            page = Integer.parseInt(pageString);
        }
        if (null != limitString) {
            limit = Integer.parseInt(limitString);
        }

        // Start of user code queryChangeRequestsAndDefectsAndTasksAndReviewTasksAndChangeNoticesAndEnhancementsAsHtml
        // End of user code

        final List<AbstractResource> resources = CMManager.queryChangeRequestsAndDefectsAndTasksAndReviewTasksAndChangeNoticesAndEnhancements(httpServletRequest, serviceProviderId, where, page, limit);

        if (resources!= null) {
            httpServletRequest.setAttribute("resources", resources);
            // Start of user code queryChangeRequestsAndDefectsAndTasksAndReviewTasksAndChangeNoticesAndEnhancementsAsHtml_setAttributes
            // End of user code

            httpServletRequest.setAttribute("queryUri",
                    uriInfo.getAbsolutePath().toString() + "?oslc.paging=true");
            if (resources.size() > limit) {
                resources.remove(resources.size() - 1);
                httpServletRequest.setAttribute("nextPageUri",
                        uriInfo.getAbsolutePath().toString() + "?oslc.paging=true&amp;page=" + (page + 1));
            }
            RequestDispatcher rd = httpServletRequest.getRequestDispatcher("/co/oslc/refimpl/cm/gen/changerequestsanddefectsandtasksandreviewtasksandchangenoticesandenhancementscollection.jsp");
            rd.forward(httpServletRequest,httpServletResponse);
        }

        throw new WebApplicationException(Status.NOT_FOUND);
    }

    @OslcDialog
    (
         title = "ChangeRequestDlgSel",
         label = "Change Request Selection Dialog",
         uri = "serviceProviders/{serviceProviderId}/resources/select_change_request",
         hintWidth = "0px",
         hintHeight = "0px",
         resourceTypes = {Oslc_cmDomainConstants.CHANGEREQUEST_TYPE},
         usages = {}
    )
    @GET
    @Path("select_change_request")
    @Consumes({ MediaType.TEXT_HTML, MediaType.WILDCARD })
    public void ChangeRequestSelector(
        @QueryParam("terms") final String terms
        , @PathParam("serviceProviderId") final String serviceProviderId
        ) throws ServletException, IOException
    {
        try {
            // Start of user code ChangeRequestSelector_init
            // End of user code

            httpServletRequest.setAttribute("selectionUri",UriBuilder.fromUri(OSLC4JUtils.getServletURI()).path(uriInfo.getPath()).build().toString());
            // Start of user code ChangeRequestSelector_setAttributes
            // End of user code

            if (terms != null ) {
                httpServletRequest.setAttribute("terms", terms);
                final List<ChangeRequest> resources = CMManager.ChangeRequestSelector(httpServletRequest, serviceProviderId, terms);
                if (resources!= null) {
                            httpServletRequest.setAttribute("resources", resources);
                            RequestDispatcher rd = httpServletRequest.getRequestDispatcher("/co/oslc/refimpl/cm/gen/changerequestselectorresults.jsp");
                            rd.forward(httpServletRequest, httpServletResponse);
                }
                //a empty search should return an empty list and not NULL!
                throw new WebApplicationException(Status.NOT_FOUND);

            } else {
                try {
                    RequestDispatcher rd = httpServletRequest.getRequestDispatcher("/co/oslc/refimpl/cm/gen/changerequestselector.jsp");
                    rd.forward(httpServletRequest, httpServletResponse);
                } catch (Exception e) {
                    throw new ServletException(e);
                }
            }
        } catch (Exception e) {
            throw new WebApplicationException(e);
        }
    }

    @OslcDialog
    (
         title = "DefectDlgSel",
         label = "Defect Selection Dialog",
         uri = "serviceProviders/{serviceProviderId}/resources/select_defect",
         hintWidth = "0px",
         hintHeight = "0px",
         resourceTypes = {Oslc_cmDomainConstants.DEFECT_TYPE},
         usages = {}
    )
    @GET
    @Path("select_defect")
    @Consumes({ MediaType.TEXT_HTML, MediaType.WILDCARD })
    public void DefectSelector(
        @QueryParam("terms") final String terms
        , @PathParam("serviceProviderId") final String serviceProviderId
        ) throws ServletException, IOException
    {
        try {
            // Start of user code DefectSelector_init
            // End of user code

            httpServletRequest.setAttribute("selectionUri",UriBuilder.fromUri(OSLC4JUtils.getServletURI()).path(uriInfo.getPath()).build().toString());
            // Start of user code DefectSelector_setAttributes
            // End of user code

            if (terms != null ) {
                httpServletRequest.setAttribute("terms", terms);
                final List<Defect> resources = CMManager.DefectSelector(httpServletRequest, serviceProviderId, terms);
                if (resources!= null) {
                            httpServletRequest.setAttribute("resources", resources);
                            RequestDispatcher rd = httpServletRequest.getRequestDispatcher("/co/oslc/refimpl/cm/gen/defectselectorresults.jsp");
                            rd.forward(httpServletRequest, httpServletResponse);
                }
                //a empty search should return an empty list and not NULL!
                throw new WebApplicationException(Status.NOT_FOUND);

            } else {
                try {
                    RequestDispatcher rd = httpServletRequest.getRequestDispatcher("/co/oslc/refimpl/cm/gen/defectselector.jsp");
                    rd.forward(httpServletRequest, httpServletResponse);
                } catch (Exception e) {
                    throw new ServletException(e);
                }
            }
        } catch (Exception e) {
            throw new WebApplicationException(e);
        }
    }

    @OslcDialog
    (
         title = "TaskDlgSel",
         label = "Task Selection Dialog",
         uri = "serviceProviders/{serviceProviderId}/resources/select_task",
         hintWidth = "0px",
         hintHeight = "0px",
         resourceTypes = {Oslc_cmDomainConstants.TASK_TYPE},
         usages = {}
    )
    @GET
    @Path("select_task")
    @Consumes({ MediaType.TEXT_HTML, MediaType.WILDCARD })
    public void TaskSelector(
        @QueryParam("terms") final String terms
        , @PathParam("serviceProviderId") final String serviceProviderId
        ) throws ServletException, IOException
    {
        try {
            // Start of user code TaskSelector_init
            // End of user code

            httpServletRequest.setAttribute("selectionUri",UriBuilder.fromUri(OSLC4JUtils.getServletURI()).path(uriInfo.getPath()).build().toString());
            // Start of user code TaskSelector_setAttributes
            // End of user code

            if (terms != null ) {
                httpServletRequest.setAttribute("terms", terms);
                final List<Task> resources = CMManager.TaskSelector(httpServletRequest, serviceProviderId, terms);
                if (resources!= null) {
                            httpServletRequest.setAttribute("resources", resources);
                            RequestDispatcher rd = httpServletRequest.getRequestDispatcher("/co/oslc/refimpl/cm/gen/taskselectorresults.jsp");
                            rd.forward(httpServletRequest, httpServletResponse);
                }
                //a empty search should return an empty list and not NULL!
                throw new WebApplicationException(Status.NOT_FOUND);

            } else {
                try {
                    RequestDispatcher rd = httpServletRequest.getRequestDispatcher("/co/oslc/refimpl/cm/gen/taskselector.jsp");
                    rd.forward(httpServletRequest, httpServletResponse);
                } catch (Exception e) {
                    throw new ServletException(e);
                }
            }
        } catch (Exception e) {
            throw new WebApplicationException(e);
        }
    }

    @OslcDialog
    (
         title = "ReviewTaskDlgSel",
         label = "Review Task Selection Dialog",
         uri = "serviceProviders/{serviceProviderId}/resources/select_review_task",
         hintWidth = "0px",
         hintHeight = "0px",
         resourceTypes = {Oslc_cmDomainConstants.REVIEWTASK_TYPE},
         usages = {}
    )
    @GET
    @Path("select_review_task")
    @Consumes({ MediaType.TEXT_HTML, MediaType.WILDCARD })
    public void ReviewTaskSelector(
        @QueryParam("terms") final String terms
        , @PathParam("serviceProviderId") final String serviceProviderId
        ) throws ServletException, IOException
    {
        try {
            // Start of user code ReviewTaskSelector_init
            // End of user code

            httpServletRequest.setAttribute("selectionUri",UriBuilder.fromUri(OSLC4JUtils.getServletURI()).path(uriInfo.getPath()).build().toString());
            // Start of user code ReviewTaskSelector_setAttributes
            // End of user code

            if (terms != null ) {
                httpServletRequest.setAttribute("terms", terms);
                final List<ReviewTask> resources = CMManager.ReviewTaskSelector(httpServletRequest, serviceProviderId, terms);
                if (resources!= null) {
                            httpServletRequest.setAttribute("resources", resources);
                            RequestDispatcher rd = httpServletRequest.getRequestDispatcher("/co/oslc/refimpl/cm/gen/reviewtaskselectorresults.jsp");
                            rd.forward(httpServletRequest, httpServletResponse);
                }
                //a empty search should return an empty list and not NULL!
                throw new WebApplicationException(Status.NOT_FOUND);

            } else {
                try {
                    RequestDispatcher rd = httpServletRequest.getRequestDispatcher("/co/oslc/refimpl/cm/gen/reviewtaskselector.jsp");
                    rd.forward(httpServletRequest, httpServletResponse);
                } catch (Exception e) {
                    throw new ServletException(e);
                }
            }
        } catch (Exception e) {
            throw new WebApplicationException(e);
        }
    }

    @OslcDialog
    (
         title = "ChangeNoticeDlgSel",
         label = "Change Notice Selection Dialog",
         uri = "serviceProviders/{serviceProviderId}/resources/select_change_notice",
         hintWidth = "0px",
         hintHeight = "0px",
         resourceTypes = {Oslc_cmDomainConstants.CHANGENOTICE_TYPE},
         usages = {}
    )
    @GET
    @Path("select_change_notice")
    @Consumes({ MediaType.TEXT_HTML, MediaType.WILDCARD })
    public void ChangeNoticeSelector(
        @QueryParam("terms") final String terms
        , @PathParam("serviceProviderId") final String serviceProviderId
        ) throws ServletException, IOException
    {
        try {
            // Start of user code ChangeNoticeSelector_init
            // End of user code

            httpServletRequest.setAttribute("selectionUri",UriBuilder.fromUri(OSLC4JUtils.getServletURI()).path(uriInfo.getPath()).build().toString());
            // Start of user code ChangeNoticeSelector_setAttributes
            // End of user code

            if (terms != null ) {
                httpServletRequest.setAttribute("terms", terms);
                final List<ChangeNotice> resources = CMManager.ChangeNoticeSelector(httpServletRequest, serviceProviderId, terms);
                if (resources!= null) {
                            httpServletRequest.setAttribute("resources", resources);
                            RequestDispatcher rd = httpServletRequest.getRequestDispatcher("/co/oslc/refimpl/cm/gen/changenoticeselectorresults.jsp");
                            rd.forward(httpServletRequest, httpServletResponse);
                }
                //a empty search should return an empty list and not NULL!
                throw new WebApplicationException(Status.NOT_FOUND);

            } else {
                try {
                    RequestDispatcher rd = httpServletRequest.getRequestDispatcher("/co/oslc/refimpl/cm/gen/changenoticeselector.jsp");
                    rd.forward(httpServletRequest, httpServletResponse);
                } catch (Exception e) {
                    throw new ServletException(e);
                }
            }
        } catch (Exception e) {
            throw new WebApplicationException(e);
        }
    }

    @OslcDialog
    (
         title = "EnhancementDlgSel",
         label = "Enhancement Selection Dialog",
         uri = "serviceProviders/{serviceProviderId}/resources/select_enhancement",
         hintWidth = "0px",
         hintHeight = "0px",
         resourceTypes = {Oslc_cmDomainConstants.ENHANCEMENT_TYPE},
         usages = {}
    )
    @GET
    @Path("select_enhancement")
    @Consumes({ MediaType.TEXT_HTML, MediaType.WILDCARD })
    public void EnhancementSelector(
        @QueryParam("terms") final String terms
        , @PathParam("serviceProviderId") final String serviceProviderId
        ) throws ServletException, IOException
    {
        try {
            // Start of user code EnhancementSelector_init
            // End of user code

            httpServletRequest.setAttribute("selectionUri",UriBuilder.fromUri(OSLC4JUtils.getServletURI()).path(uriInfo.getPath()).build().toString());
            // Start of user code EnhancementSelector_setAttributes
            // End of user code

            if (terms != null ) {
                httpServletRequest.setAttribute("terms", terms);
                final List<Enhancement> resources = CMManager.EnhancementSelector(httpServletRequest, serviceProviderId, terms);
                if (resources!= null) {
                            httpServletRequest.setAttribute("resources", resources);
                            RequestDispatcher rd = httpServletRequest.getRequestDispatcher("/co/oslc/refimpl/cm/gen/enhancementselectorresults.jsp");
                            rd.forward(httpServletRequest, httpServletResponse);
                }
                //a empty search should return an empty list and not NULL!
                throw new WebApplicationException(Status.NOT_FOUND);

            } else {
                try {
                    RequestDispatcher rd = httpServletRequest.getRequestDispatcher("/co/oslc/refimpl/cm/gen/enhancementselector.jsp");
                    rd.forward(httpServletRequest, httpServletResponse);
                } catch (Exception e) {
                    throw new ServletException(e);
                }
            }
        } catch (Exception e) {
            throw new WebApplicationException(e);
        }
    }

    /**
     * Create a single ChangeRequest via RDF/XML, XML or JSON POST
     *
     * @throws IOException
     * @throws ServletException
     */
    @OslcCreationFactory
    (
         title = "ChangeRequestCF",
         label = "Change Request Creation Factory",
         resourceShapes = {OslcConstants.PATH_RESOURCE_SHAPES + "/" + Oslc_cmDomainConstants.CHANGEREQUEST_PATH},
         resourceTypes = {Oslc_cmDomainConstants.CHANGEREQUEST_TYPE},
         usages = {}
    )
    @POST
    @Path("create_change_request")
    @Consumes({OslcMediaType.APPLICATION_RDF_XML, OslcMediaType.APPLICATION_JSON_LD, OslcMediaType.TEXT_TURTLE, OslcMediaType.APPLICATION_XML, OslcMediaType.APPLICATION_JSON })
    @Produces({OslcMediaType.APPLICATION_RDF_XML, OslcMediaType.APPLICATION_JSON_LD, OslcMediaType.TEXT_TURTLE, OslcMediaType.APPLICATION_XML, OslcMediaType.APPLICATION_JSON})
    public Response createChangeRequest(
            @PathParam("serviceProviderId") final String serviceProviderId ,
            final ChangeRequest aResource
        ) throws IOException, ServletException
    {
        try {
            ChangeRequest newResource = CMManager.createChangeRequest(httpServletRequest, aResource, serviceProviderId);
            httpServletResponse.setHeader("ETag", CMManager.getETagFromChangeRequest(newResource));
            return Response.created(newResource.getAbout()).entity(newResource).header(CMConstants.HDR_OSLC_VERSION, CMConstants.OSLC_VERSION_V2).build();
        } catch (Exception e) {
            e.printStackTrace();
            throw new WebApplicationException(e);
        }
    }

    /**
     * OSLC delegated creation dialog for a single resource
     *
     * @throws IOException
     * @throws ServletException
     */
    @GET
    @Path("create_defect")
    @Consumes({MediaType.WILDCARD})
    public void DefectCreator(
                @PathParam("serviceProviderId") final String serviceProviderId
        ) throws IOException, ServletException
    {
        // Start of user code DefectCreator
        // End of user code

        httpServletRequest.setAttribute("creatorUri", UriBuilder.fromUri(OSLC4JUtils.getServletURI()).path(uriInfo.getPath()).build().toString());
        httpServletRequest.setAttribute("serviceProviderId", serviceProviderId);

        RequestDispatcher rd = httpServletRequest.getRequestDispatcher("/co/oslc/refimpl/cm/gen/defectcreator.jsp");
        rd.forward(httpServletRequest, httpServletResponse);
    }

    /**
     * Backend creator for the OSLC delegated creation dialog.
     *
     * Accepts the input in FormParams and returns a small JSON response
     */
    @OslcDialog
    (
         title = "DefectDlgCr",
         label = "Defect Creation Dialog",
         uri = "serviceProviders/{serviceProviderId}/resources/create_defect",
         hintWidth = "0px",
         hintHeight = "0px",
         resourceTypes = {Oslc_cmDomainConstants.DEFECT_TYPE},
         usages = {}
    )
    @POST
    @Path("create_defect")
    @Consumes({ MediaType.APPLICATION_FORM_URLENCODED})
    public void createDefectFromDialog(
            @PathParam("serviceProviderId") final String serviceProviderId
        ) {
        try {
            Defect newResource = null;

            Defect aResource = new Defect();

            String[] paramValues;

            paramValues = httpServletRequest.getParameterValues("shortTitle");
            if (paramValues != null) {
                    if (paramValues.length == 1) {
                        if (paramValues[0].length() != 0)
                            aResource.setShortTitle(paramValues[0]);
                        // else, there is an empty value for that parameter, and hence ignore since the parameter is not actually set.
                    }

            }
            paramValues = httpServletRequest.getParameterValues("description");
            if (paramValues != null) {
                    if (paramValues.length == 1) {
                        if (paramValues[0].length() != 0)
                            aResource.setDescription(paramValues[0]);
                        // else, there is an empty value for that parameter, and hence ignore since the parameter is not actually set.
                    }

            }
            paramValues = httpServletRequest.getParameterValues("title");
            if (paramValues != null) {
                    if (paramValues.length == 1) {
                        if (paramValues[0].length() != 0)
                            aResource.setTitle(paramValues[0]);
                        // else, there is an empty value for that parameter, and hence ignore since the parameter is not actually set.
                    }

            }
            paramValues = httpServletRequest.getParameterValues("identifier");
            if (paramValues != null) {
                    if (paramValues.length == 1) {
                        if (paramValues[0].length() != 0)
                            aResource.setIdentifier(paramValues[0]);
                        // else, there is an empty value for that parameter, and hence ignore since the parameter is not actually set.
                    }

            }
            paramValues = httpServletRequest.getParameterValues("subject");
            if (paramValues != null) {
                    for(int i=0; i<paramValues.length; i++) {
                        aResource.addSubject(paramValues[i]);
                    }
            }
            paramValues = httpServletRequest.getParameterValues("creator");
            if (paramValues != null) {
                    for(int i=0; i<paramValues.length; i++) {
                        aResource.addCreator(new Link(new URI(paramValues[i])));
                    }
            }
            paramValues = httpServletRequest.getParameterValues("contributor");
            if (paramValues != null) {
                    for(int i=0; i<paramValues.length; i++) {
                        aResource.addContributor(new Link(new URI(paramValues[i])));
                    }
            }
            paramValues = httpServletRequest.getParameterValues("created");
            if (paramValues != null) {
                    if (paramValues.length == 1) {
                        if (paramValues[0].length() != 0)
                            aResource.setCreated(new SimpleDateFormat("M/D/y").parse(paramValues[0]));
                        // else, there is an empty value for that parameter, and hence ignore since the parameter is not actually set.
                    }

            }
            paramValues = httpServletRequest.getParameterValues("modified");
            if (paramValues != null) {
                    if (paramValues.length == 1) {
                        if (paramValues[0].length() != 0)
                            aResource.setModified(new SimpleDateFormat("M/D/y").parse(paramValues[0]));
                        // else, there is an empty value for that parameter, and hence ignore since the parameter is not actually set.
                    }

            }
            paramValues = httpServletRequest.getParameterValues("serviceProvider");
            if (paramValues != null) {
                    for(int i=0; i<paramValues.length; i++) {
                        aResource.addServiceProvider(new Link(new URI(paramValues[i])));
                    }
            }
            paramValues = httpServletRequest.getParameterValues("instanceShape");
            if (paramValues != null) {
                    for(int i=0; i<paramValues.length; i++) {
                        aResource.addInstanceShape(new Link(new URI(paramValues[i])));
                    }
            }
            paramValues = httpServletRequest.getParameterValues("discussedBy");
            if (paramValues != null) {
                    if (paramValues.length == 1) {
                        if (paramValues[0].length() != 0)
                            aResource.setDiscussedBy(new Link(new URI(paramValues[0])));
                        // else, there is an empty value for that parameter, and hence ignore since the parameter is not actually set.
                    }

            }
            paramValues = httpServletRequest.getParameterValues("closeDate");
            if (paramValues != null) {
                    if (paramValues.length == 1) {
                        if (paramValues[0].length() != 0)
                            aResource.setCloseDate(new SimpleDateFormat("M/D/y").parse(paramValues[0]));
                        // else, there is an empty value for that parameter, and hence ignore since the parameter is not actually set.
                    }

            }
            paramValues = httpServletRequest.getParameterValues("status");
            if (paramValues != null) {
                    if (paramValues.length == 1) {
                        if (paramValues[0].length() != 0)
                            aResource.setStatus(paramValues[0]);
                        // else, there is an empty value for that parameter, and hence ignore since the parameter is not actually set.
                    }

            }
            paramValues = httpServletRequest.getParameterValues("closed");
            if (paramValues != null) {
                    if (paramValues.length == 1) {
                        if (paramValues[0].length() != 0)
                            aResource.setClosed(new Boolean(paramValues[0]));
                        // else, there is an empty value for that parameter, and hence ignore since the parameter is not actually set.
                    }

            }
            paramValues = httpServletRequest.getParameterValues("inProgress");
            if (paramValues != null) {
                    if (paramValues.length == 1) {
                        if (paramValues[0].length() != 0)
                            aResource.setInProgress(new Boolean(paramValues[0]));
                        // else, there is an empty value for that parameter, and hence ignore since the parameter is not actually set.
                    }

            }
            paramValues = httpServletRequest.getParameterValues("fixed");
            if (paramValues != null) {
                    if (paramValues.length == 1) {
                        if (paramValues[0].length() != 0)
                            aResource.setFixed(new Boolean(paramValues[0]));
                        // else, there is an empty value for that parameter, and hence ignore since the parameter is not actually set.
                    }

            }
            paramValues = httpServletRequest.getParameterValues("approved");
            if (paramValues != null) {
                    if (paramValues.length == 1) {
                        if (paramValues[0].length() != 0)
                            aResource.setApproved(new Boolean(paramValues[0]));
                        // else, there is an empty value for that parameter, and hence ignore since the parameter is not actually set.
                    }

            }
            paramValues = httpServletRequest.getParameterValues("reviewed");
            if (paramValues != null) {
                    if (paramValues.length == 1) {
                        if (paramValues[0].length() != 0)
                            aResource.setReviewed(new Boolean(paramValues[0]));
                        // else, there is an empty value for that parameter, and hence ignore since the parameter is not actually set.
                    }

            }
            paramValues = httpServletRequest.getParameterValues("verified");
            if (paramValues != null) {
                    if (paramValues.length == 1) {
                        if (paramValues[0].length() != 0)
                            aResource.setVerified(new Boolean(paramValues[0]));
                        // else, there is an empty value for that parameter, and hence ignore since the parameter is not actually set.
                    }

            }
            paramValues = httpServletRequest.getParameterValues("relatedChangeRequest");
            if (paramValues != null) {
                    for(int i=0; i<paramValues.length; i++) {
                        aResource.addRelatedChangeRequest(new Link(new URI(paramValues[i])));
                    }
            }
            paramValues = httpServletRequest.getParameterValues("affectsPlanItem");
            if (paramValues != null) {
                    for(int i=0; i<paramValues.length; i++) {
                        aResource.addAffectsPlanItem(new Link(new URI(paramValues[i])));
                    }
            }
            paramValues = httpServletRequest.getParameterValues("affectedByDefect");
            if (paramValues != null) {
                    for(int i=0; i<paramValues.length; i++) {
                        aResource.addAffectedByDefect(new Link(new URI(paramValues[i])));
                    }
            }
            paramValues = httpServletRequest.getParameterValues("tracksRequirement");
            if (paramValues != null) {
                    for(int i=0; i<paramValues.length; i++) {
                        aResource.addTracksRequirement(new Link(new URI(paramValues[i])));
                    }
            }
            paramValues = httpServletRequest.getParameterValues("implementsRequirement");
            if (paramValues != null) {
                    for(int i=0; i<paramValues.length; i++) {
                        aResource.addImplementsRequirement(new Link(new URI(paramValues[i])));
                    }
            }
            paramValues = httpServletRequest.getParameterValues("affectsRequirement");
            if (paramValues != null) {
                    for(int i=0; i<paramValues.length; i++) {
                        aResource.addAffectsRequirement(new Link(new URI(paramValues[i])));
                    }
            }
            paramValues = httpServletRequest.getParameterValues("tracksChangeSet");
            if (paramValues != null) {
                    for(int i=0; i<paramValues.length; i++) {
                        aResource.addTracksChangeSet(new Link(new URI(paramValues[i])));
                    }
            }
            paramValues = httpServletRequest.getParameterValues("parent");
            if (paramValues != null) {
                    for(int i=0; i<paramValues.length; i++) {
                        aResource.addParent(new Link(new URI(paramValues[i])));
                    }
            }
            paramValues = httpServletRequest.getParameterValues("priority");
            if (paramValues != null) {
                    for(int i=0; i<paramValues.length; i++) {
                        aResource.addPriority(new Link(new URI(paramValues[i])));
                    }
            }
            paramValues = httpServletRequest.getParameterValues("state");
            if (paramValues != null) {
                    if (paramValues.length == 1) {
                        if (paramValues[0].length() != 0)
                            aResource.setState(new Link(new URI(paramValues[0])));
                        // else, there is an empty value for that parameter, and hence ignore since the parameter is not actually set.
                    }

            }
            paramValues = httpServletRequest.getParameterValues("authorizer");
            if (paramValues != null) {
                    for(int i=0; i<paramValues.length; i++) {
                        aResource.addAuthorizer(new Link(new URI(paramValues[i])));
                    }
            }

            newResource = CMManager.createDefectFromDialog(httpServletRequest, aResource, serviceProviderId);

            if (newResource != null) {
                httpServletRequest.setAttribute("newResource", newResource);
                httpServletRequest.setAttribute("newResourceUri", newResource.getAbout().toString());

                // Send back to the form a small JSON response
                httpServletResponse.setContentType("application/json");
                httpServletResponse.setStatus(Status.CREATED.getStatusCode());
                httpServletResponse.addHeader("Location", newResource.getAbout().toString());
                PrintWriter out = httpServletResponse.getWriter();

                JSONObject oslcResponse = new JSONObject();
                JSONObject newResourceJson = new JSONObject();
                newResourceJson.put("rdf:resource", newResource.getAbout().toString());
                // Start of user code OSLC Resource Label
                newResourceJson.put("oslc:label", newResource.toString());
                // End of user code
                oslcResponse.put("oslc:results", new Object[]{newResourceJson});

                out.print(oslcResponse.toString());
                out.close();
            }
        } catch (Exception e) {
            e.printStackTrace();
            throw new WebApplicationException(e);
        }
    }
    /**
     * OSLC delegated creation dialog for a single resource
     *
     * @throws IOException
     * @throws ServletException
     */
    @GET
    @Path("create_task")
    @Consumes({MediaType.WILDCARD})
    public void TaskCreator(
                @PathParam("serviceProviderId") final String serviceProviderId
        ) throws IOException, ServletException
    {
        // Start of user code TaskCreator
        // End of user code

        httpServletRequest.setAttribute("creatorUri", UriBuilder.fromUri(OSLC4JUtils.getServletURI()).path(uriInfo.getPath()).build().toString());
        httpServletRequest.setAttribute("serviceProviderId", serviceProviderId);

        RequestDispatcher rd = httpServletRequest.getRequestDispatcher("/co/oslc/refimpl/cm/gen/taskcreator.jsp");
        rd.forward(httpServletRequest, httpServletResponse);
    }

    /**
     * Backend creator for the OSLC delegated creation dialog.
     *
     * Accepts the input in FormParams and returns a small JSON response
     */
    @OslcDialog
    (
         title = "TaskDlgCr",
         label = "Task Creation Dialog",
         uri = "serviceProviders/{serviceProviderId}/resources/create_task",
         hintWidth = "0px",
         hintHeight = "0px",
         resourceTypes = {Oslc_cmDomainConstants.TASK_TYPE},
         usages = {}
    )
    @POST
    @Path("create_task")
    @Consumes({ MediaType.APPLICATION_FORM_URLENCODED})
    public void createTaskFromDialog(
            @PathParam("serviceProviderId") final String serviceProviderId
        ) {
        try {
            Task newResource = null;

            Task aResource = new Task();

            String[] paramValues;

            paramValues = httpServletRequest.getParameterValues("shortTitle");
            if (paramValues != null) {
                    if (paramValues.length == 1) {
                        if (paramValues[0].length() != 0)
                            aResource.setShortTitle(paramValues[0]);
                        // else, there is an empty value for that parameter, and hence ignore since the parameter is not actually set.
                    }

            }
            paramValues = httpServletRequest.getParameterValues("description");
            if (paramValues != null) {
                    if (paramValues.length == 1) {
                        if (paramValues[0].length() != 0)
                            aResource.setDescription(paramValues[0]);
                        // else, there is an empty value for that parameter, and hence ignore since the parameter is not actually set.
                    }

            }
            paramValues = httpServletRequest.getParameterValues("title");
            if (paramValues != null) {
                    if (paramValues.length == 1) {
                        if (paramValues[0].length() != 0)
                            aResource.setTitle(paramValues[0]);
                        // else, there is an empty value for that parameter, and hence ignore since the parameter is not actually set.
                    }

            }
            paramValues = httpServletRequest.getParameterValues("identifier");
            if (paramValues != null) {
                    if (paramValues.length == 1) {
                        if (paramValues[0].length() != 0)
                            aResource.setIdentifier(paramValues[0]);
                        // else, there is an empty value for that parameter, and hence ignore since the parameter is not actually set.
                    }

            }
            paramValues = httpServletRequest.getParameterValues("subject");
            if (paramValues != null) {
                    for(int i=0; i<paramValues.length; i++) {
                        aResource.addSubject(paramValues[i]);
                    }
            }
            paramValues = httpServletRequest.getParameterValues("creator");
            if (paramValues != null) {
                    for(int i=0; i<paramValues.length; i++) {
                        aResource.addCreator(new Link(new URI(paramValues[i])));
                    }
            }
            paramValues = httpServletRequest.getParameterValues("contributor");
            if (paramValues != null) {
                    for(int i=0; i<paramValues.length; i++) {
                        aResource.addContributor(new Link(new URI(paramValues[i])));
                    }
            }
            paramValues = httpServletRequest.getParameterValues("created");
            if (paramValues != null) {
                    if (paramValues.length == 1) {
                        if (paramValues[0].length() != 0)
                            aResource.setCreated(new SimpleDateFormat("M/D/y").parse(paramValues[0]));
                        // else, there is an empty value for that parameter, and hence ignore since the parameter is not actually set.
                    }

            }
            paramValues = httpServletRequest.getParameterValues("modified");
            if (paramValues != null) {
                    if (paramValues.length == 1) {
                        if (paramValues[0].length() != 0)
                            aResource.setModified(new SimpleDateFormat("M/D/y").parse(paramValues[0]));
                        // else, there is an empty value for that parameter, and hence ignore since the parameter is not actually set.
                    }

            }
            paramValues = httpServletRequest.getParameterValues("serviceProvider");
            if (paramValues != null) {
                    for(int i=0; i<paramValues.length; i++) {
                        aResource.addServiceProvider(new Link(new URI(paramValues[i])));
                    }
            }
            paramValues = httpServletRequest.getParameterValues("instanceShape");
            if (paramValues != null) {
                    for(int i=0; i<paramValues.length; i++) {
                        aResource.addInstanceShape(new Link(new URI(paramValues[i])));
                    }
            }
            paramValues = httpServletRequest.getParameterValues("discussedBy");
            if (paramValues != null) {
                    if (paramValues.length == 1) {
                        if (paramValues[0].length() != 0)
                            aResource.setDiscussedBy(new Link(new URI(paramValues[0])));
                        // else, there is an empty value for that parameter, and hence ignore since the parameter is not actually set.
                    }

            }
            paramValues = httpServletRequest.getParameterValues("closeDate");
            if (paramValues != null) {
                    if (paramValues.length == 1) {
                        if (paramValues[0].length() != 0)
                            aResource.setCloseDate(new SimpleDateFormat("M/D/y").parse(paramValues[0]));
                        // else, there is an empty value for that parameter, and hence ignore since the parameter is not actually set.
                    }

            }
            paramValues = httpServletRequest.getParameterValues("status");
            if (paramValues != null) {
                    if (paramValues.length == 1) {
                        if (paramValues[0].length() != 0)
                            aResource.setStatus(paramValues[0]);
                        // else, there is an empty value for that parameter, and hence ignore since the parameter is not actually set.
                    }

            }
            paramValues = httpServletRequest.getParameterValues("closed");
            if (paramValues != null) {
                    if (paramValues.length == 1) {
                        if (paramValues[0].length() != 0)
                            aResource.setClosed(new Boolean(paramValues[0]));
                        // else, there is an empty value for that parameter, and hence ignore since the parameter is not actually set.
                    }

            }
            paramValues = httpServletRequest.getParameterValues("inProgress");
            if (paramValues != null) {
                    if (paramValues.length == 1) {
                        if (paramValues[0].length() != 0)
                            aResource.setInProgress(new Boolean(paramValues[0]));
                        // else, there is an empty value for that parameter, and hence ignore since the parameter is not actually set.
                    }

            }
            paramValues = httpServletRequest.getParameterValues("fixed");
            if (paramValues != null) {
                    if (paramValues.length == 1) {
                        if (paramValues[0].length() != 0)
                            aResource.setFixed(new Boolean(paramValues[0]));
                        // else, there is an empty value for that parameter, and hence ignore since the parameter is not actually set.
                    }

            }
            paramValues = httpServletRequest.getParameterValues("approved");
            if (paramValues != null) {
                    if (paramValues.length == 1) {
                        if (paramValues[0].length() != 0)
                            aResource.setApproved(new Boolean(paramValues[0]));
                        // else, there is an empty value for that parameter, and hence ignore since the parameter is not actually set.
                    }

            }
            paramValues = httpServletRequest.getParameterValues("reviewed");
            if (paramValues != null) {
                    if (paramValues.length == 1) {
                        if (paramValues[0].length() != 0)
                            aResource.setReviewed(new Boolean(paramValues[0]));
                        // else, there is an empty value for that parameter, and hence ignore since the parameter is not actually set.
                    }

            }
            paramValues = httpServletRequest.getParameterValues("verified");
            if (paramValues != null) {
                    if (paramValues.length == 1) {
                        if (paramValues[0].length() != 0)
                            aResource.setVerified(new Boolean(paramValues[0]));
                        // else, there is an empty value for that parameter, and hence ignore since the parameter is not actually set.
                    }

            }
            paramValues = httpServletRequest.getParameterValues("relatedChangeRequest");
            if (paramValues != null) {
                    for(int i=0; i<paramValues.length; i++) {
                        aResource.addRelatedChangeRequest(new Link(new URI(paramValues[i])));
                    }
            }
            paramValues = httpServletRequest.getParameterValues("affectsPlanItem");
            if (paramValues != null) {
                    for(int i=0; i<paramValues.length; i++) {
                        aResource.addAffectsPlanItem(new Link(new URI(paramValues[i])));
                    }
            }
            paramValues = httpServletRequest.getParameterValues("affectedByDefect");
            if (paramValues != null) {
                    for(int i=0; i<paramValues.length; i++) {
                        aResource.addAffectedByDefect(new Link(new URI(paramValues[i])));
                    }
            }
            paramValues = httpServletRequest.getParameterValues("tracksRequirement");
            if (paramValues != null) {
                    for(int i=0; i<paramValues.length; i++) {
                        aResource.addTracksRequirement(new Link(new URI(paramValues[i])));
                    }
            }
            paramValues = httpServletRequest.getParameterValues("implementsRequirement");
            if (paramValues != null) {
                    for(int i=0; i<paramValues.length; i++) {
                        aResource.addImplementsRequirement(new Link(new URI(paramValues[i])));
                    }
            }
            paramValues = httpServletRequest.getParameterValues("affectsRequirement");
            if (paramValues != null) {
                    for(int i=0; i<paramValues.length; i++) {
                        aResource.addAffectsRequirement(new Link(new URI(paramValues[i])));
                    }
            }
            paramValues = httpServletRequest.getParameterValues("tracksChangeSet");
            if (paramValues != null) {
                    for(int i=0; i<paramValues.length; i++) {
                        aResource.addTracksChangeSet(new Link(new URI(paramValues[i])));
                    }
            }
            paramValues = httpServletRequest.getParameterValues("parent");
            if (paramValues != null) {
                    for(int i=0; i<paramValues.length; i++) {
                        aResource.addParent(new Link(new URI(paramValues[i])));
                    }
            }
            paramValues = httpServletRequest.getParameterValues("priority");
            if (paramValues != null) {
                    for(int i=0; i<paramValues.length; i++) {
                        aResource.addPriority(new Link(new URI(paramValues[i])));
                    }
            }
            paramValues = httpServletRequest.getParameterValues("state");
            if (paramValues != null) {
                    if (paramValues.length == 1) {
                        if (paramValues[0].length() != 0)
                            aResource.setState(new Link(new URI(paramValues[0])));
                        // else, there is an empty value for that parameter, and hence ignore since the parameter is not actually set.
                    }

            }
            paramValues = httpServletRequest.getParameterValues("authorizer");
            if (paramValues != null) {
                    for(int i=0; i<paramValues.length; i++) {
                        aResource.addAuthorizer(new Link(new URI(paramValues[i])));
                    }
            }

            newResource = CMManager.createTaskFromDialog(httpServletRequest, aResource, serviceProviderId);

            if (newResource != null) {
                httpServletRequest.setAttribute("newResource", newResource);
                httpServletRequest.setAttribute("newResourceUri", newResource.getAbout().toString());

                // Send back to the form a small JSON response
                httpServletResponse.setContentType("application/json");
                httpServletResponse.setStatus(Status.CREATED.getStatusCode());
                httpServletResponse.addHeader("Location", newResource.getAbout().toString());
                PrintWriter out = httpServletResponse.getWriter();

                JSONObject oslcResponse = new JSONObject();
                JSONObject newResourceJson = new JSONObject();
                newResourceJson.put("rdf:resource", newResource.getAbout().toString());
                // Start of user code OSLC Resource Label
                newResourceJson.put("oslc:label", newResource.toString());
                // End of user code
                oslcResponse.put("oslc:results", new Object[]{newResourceJson});

                out.print(oslcResponse.toString());
                out.close();
            }
        } catch (Exception e) {
            e.printStackTrace();
            throw new WebApplicationException(e);
        }
    }
    /**
     * OSLC delegated creation dialog for a single resource
     *
     * @throws IOException
     * @throws ServletException
     */
    @GET
    @Path("create_review_task")
    @Consumes({MediaType.WILDCARD})
    public void ReviewTaskCreator(
                @PathParam("serviceProviderId") final String serviceProviderId
        ) throws IOException, ServletException
    {
        // Start of user code ReviewTaskCreator
        // End of user code

        httpServletRequest.setAttribute("creatorUri", UriBuilder.fromUri(OSLC4JUtils.getServletURI()).path(uriInfo.getPath()).build().toString());
        httpServletRequest.setAttribute("serviceProviderId", serviceProviderId);

        RequestDispatcher rd = httpServletRequest.getRequestDispatcher("/co/oslc/refimpl/cm/gen/reviewtaskcreator.jsp");
        rd.forward(httpServletRequest, httpServletResponse);
    }

    /**
     * Backend creator for the OSLC delegated creation dialog.
     *
     * Accepts the input in FormParams and returns a small JSON response
     */
    @OslcDialog
    (
         title = "ReviewTaskDlgCr",
         label = "Review Task Creation Dialog",
         uri = "serviceProviders/{serviceProviderId}/resources/create_review_task",
         hintWidth = "0px",
         hintHeight = "0px",
         resourceTypes = {Oslc_cmDomainConstants.REVIEWTASK_TYPE},
         usages = {}
    )
    @POST
    @Path("create_review_task")
    @Consumes({ MediaType.APPLICATION_FORM_URLENCODED})
    public void createReviewTaskFromDialog(
            @PathParam("serviceProviderId") final String serviceProviderId
        ) {
        try {
            ReviewTask newResource = null;

            ReviewTask aResource = new ReviewTask();

            String[] paramValues;

            paramValues = httpServletRequest.getParameterValues("shortTitle");
            if (paramValues != null) {
                    if (paramValues.length == 1) {
                        if (paramValues[0].length() != 0)
                            aResource.setShortTitle(paramValues[0]);
                        // else, there is an empty value for that parameter, and hence ignore since the parameter is not actually set.
                    }

            }
            paramValues = httpServletRequest.getParameterValues("description");
            if (paramValues != null) {
                    if (paramValues.length == 1) {
                        if (paramValues[0].length() != 0)
                            aResource.setDescription(paramValues[0]);
                        // else, there is an empty value for that parameter, and hence ignore since the parameter is not actually set.
                    }

            }
            paramValues = httpServletRequest.getParameterValues("title");
            if (paramValues != null) {
                    if (paramValues.length == 1) {
                        if (paramValues[0].length() != 0)
                            aResource.setTitle(paramValues[0]);
                        // else, there is an empty value for that parameter, and hence ignore since the parameter is not actually set.
                    }

            }
            paramValues = httpServletRequest.getParameterValues("identifier");
            if (paramValues != null) {
                    if (paramValues.length == 1) {
                        if (paramValues[0].length() != 0)
                            aResource.setIdentifier(paramValues[0]);
                        // else, there is an empty value for that parameter, and hence ignore since the parameter is not actually set.
                    }

            }
            paramValues = httpServletRequest.getParameterValues("subject");
            if (paramValues != null) {
                    for(int i=0; i<paramValues.length; i++) {
                        aResource.addSubject(paramValues[i]);
                    }
            }
            paramValues = httpServletRequest.getParameterValues("creator");
            if (paramValues != null) {
                    for(int i=0; i<paramValues.length; i++) {
                        aResource.addCreator(new Link(new URI(paramValues[i])));
                    }
            }
            paramValues = httpServletRequest.getParameterValues("contributor");
            if (paramValues != null) {
                    for(int i=0; i<paramValues.length; i++) {
                        aResource.addContributor(new Link(new URI(paramValues[i])));
                    }
            }
            paramValues = httpServletRequest.getParameterValues("created");
            if (paramValues != null) {
                    if (paramValues.length == 1) {
                        if (paramValues[0].length() != 0)
                            aResource.setCreated(new SimpleDateFormat("M/D/y").parse(paramValues[0]));
                        // else, there is an empty value for that parameter, and hence ignore since the parameter is not actually set.
                    }

            }
            paramValues = httpServletRequest.getParameterValues("modified");
            if (paramValues != null) {
                    if (paramValues.length == 1) {
                        if (paramValues[0].length() != 0)
                            aResource.setModified(new SimpleDateFormat("M/D/y").parse(paramValues[0]));
                        // else, there is an empty value for that parameter, and hence ignore since the parameter is not actually set.
                    }

            }
            paramValues = httpServletRequest.getParameterValues("serviceProvider");
            if (paramValues != null) {
                    for(int i=0; i<paramValues.length; i++) {
                        aResource.addServiceProvider(new Link(new URI(paramValues[i])));
                    }
            }
            paramValues = httpServletRequest.getParameterValues("instanceShape");
            if (paramValues != null) {
                    for(int i=0; i<paramValues.length; i++) {
                        aResource.addInstanceShape(new Link(new URI(paramValues[i])));
                    }
            }
            paramValues = httpServletRequest.getParameterValues("discussedBy");
            if (paramValues != null) {
                    if (paramValues.length == 1) {
                        if (paramValues[0].length() != 0)
                            aResource.setDiscussedBy(new Link(new URI(paramValues[0])));
                        // else, there is an empty value for that parameter, and hence ignore since the parameter is not actually set.
                    }

            }
            paramValues = httpServletRequest.getParameterValues("closeDate");
            if (paramValues != null) {
                    if (paramValues.length == 1) {
                        if (paramValues[0].length() != 0)
                            aResource.setCloseDate(new SimpleDateFormat("M/D/y").parse(paramValues[0]));
                        // else, there is an empty value for that parameter, and hence ignore since the parameter is not actually set.
                    }

            }
            paramValues = httpServletRequest.getParameterValues("status");
            if (paramValues != null) {
                    if (paramValues.length == 1) {
                        if (paramValues[0].length() != 0)
                            aResource.setStatus(paramValues[0]);
                        // else, there is an empty value for that parameter, and hence ignore since the parameter is not actually set.
                    }

            }
            paramValues = httpServletRequest.getParameterValues("closed");
            if (paramValues != null) {
                    if (paramValues.length == 1) {
                        if (paramValues[0].length() != 0)
                            aResource.setClosed(new Boolean(paramValues[0]));
                        // else, there is an empty value for that parameter, and hence ignore since the parameter is not actually set.
                    }

            }
            paramValues = httpServletRequest.getParameterValues("inProgress");
            if (paramValues != null) {
                    if (paramValues.length == 1) {
                        if (paramValues[0].length() != 0)
                            aResource.setInProgress(new Boolean(paramValues[0]));
                        // else, there is an empty value for that parameter, and hence ignore since the parameter is not actually set.
                    }

            }
            paramValues = httpServletRequest.getParameterValues("fixed");
            if (paramValues != null) {
                    if (paramValues.length == 1) {
                        if (paramValues[0].length() != 0)
                            aResource.setFixed(new Boolean(paramValues[0]));
                        // else, there is an empty value for that parameter, and hence ignore since the parameter is not actually set.
                    }

            }
            paramValues = httpServletRequest.getParameterValues("approved");
            if (paramValues != null) {
                    if (paramValues.length == 1) {
                        if (paramValues[0].length() != 0)
                            aResource.setApproved(new Boolean(paramValues[0]));
                        // else, there is an empty value for that parameter, and hence ignore since the parameter is not actually set.
                    }

            }
            paramValues = httpServletRequest.getParameterValues("reviewed");
            if (paramValues != null) {
                    if (paramValues.length == 1) {
                        if (paramValues[0].length() != 0)
                            aResource.setReviewed(new Boolean(paramValues[0]));
                        // else, there is an empty value for that parameter, and hence ignore since the parameter is not actually set.
                    }

            }
            paramValues = httpServletRequest.getParameterValues("verified");
            if (paramValues != null) {
                    if (paramValues.length == 1) {
                        if (paramValues[0].length() != 0)
                            aResource.setVerified(new Boolean(paramValues[0]));
                        // else, there is an empty value for that parameter, and hence ignore since the parameter is not actually set.
                    }

            }
            paramValues = httpServletRequest.getParameterValues("relatedChangeRequest");
            if (paramValues != null) {
                    for(int i=0; i<paramValues.length; i++) {
                        aResource.addRelatedChangeRequest(new Link(new URI(paramValues[i])));
                    }
            }
            paramValues = httpServletRequest.getParameterValues("affectsPlanItem");
            if (paramValues != null) {
                    for(int i=0; i<paramValues.length; i++) {
                        aResource.addAffectsPlanItem(new Link(new URI(paramValues[i])));
                    }
            }
            paramValues = httpServletRequest.getParameterValues("affectedByDefect");
            if (paramValues != null) {
                    for(int i=0; i<paramValues.length; i++) {
                        aResource.addAffectedByDefect(new Link(new URI(paramValues[i])));
                    }
            }
            paramValues = httpServletRequest.getParameterValues("tracksRequirement");
            if (paramValues != null) {
                    for(int i=0; i<paramValues.length; i++) {
                        aResource.addTracksRequirement(new Link(new URI(paramValues[i])));
                    }
            }
            paramValues = httpServletRequest.getParameterValues("implementsRequirement");
            if (paramValues != null) {
                    for(int i=0; i<paramValues.length; i++) {
                        aResource.addImplementsRequirement(new Link(new URI(paramValues[i])));
                    }
            }
            paramValues = httpServletRequest.getParameterValues("affectsRequirement");
            if (paramValues != null) {
                    for(int i=0; i<paramValues.length; i++) {
                        aResource.addAffectsRequirement(new Link(new URI(paramValues[i])));
                    }
            }
            paramValues = httpServletRequest.getParameterValues("tracksChangeSet");
            if (paramValues != null) {
                    for(int i=0; i<paramValues.length; i++) {
                        aResource.addTracksChangeSet(new Link(new URI(paramValues[i])));
                    }
            }
            paramValues = httpServletRequest.getParameterValues("parent");
            if (paramValues != null) {
                    for(int i=0; i<paramValues.length; i++) {
                        aResource.addParent(new Link(new URI(paramValues[i])));
                    }
            }
            paramValues = httpServletRequest.getParameterValues("priority");
            if (paramValues != null) {
                    for(int i=0; i<paramValues.length; i++) {
                        aResource.addPriority(new Link(new URI(paramValues[i])));
                    }
            }
            paramValues = httpServletRequest.getParameterValues("state");
            if (paramValues != null) {
                    if (paramValues.length == 1) {
                        if (paramValues[0].length() != 0)
                            aResource.setState(new Link(new URI(paramValues[0])));
                        // else, there is an empty value for that parameter, and hence ignore since the parameter is not actually set.
                    }

            }
            paramValues = httpServletRequest.getParameterValues("authorizer");
            if (paramValues != null) {
                    for(int i=0; i<paramValues.length; i++) {
                        aResource.addAuthorizer(new Link(new URI(paramValues[i])));
                    }
            }

            newResource = CMManager.createReviewTaskFromDialog(httpServletRequest, aResource, serviceProviderId);

            if (newResource != null) {
                httpServletRequest.setAttribute("newResource", newResource);
                httpServletRequest.setAttribute("newResourceUri", newResource.getAbout().toString());

                // Send back to the form a small JSON response
                httpServletResponse.setContentType("application/json");
                httpServletResponse.setStatus(Status.CREATED.getStatusCode());
                httpServletResponse.addHeader("Location", newResource.getAbout().toString());
                PrintWriter out = httpServletResponse.getWriter();

                JSONObject oslcResponse = new JSONObject();
                JSONObject newResourceJson = new JSONObject();
                newResourceJson.put("rdf:resource", newResource.getAbout().toString());
                // Start of user code OSLC Resource Label
                newResourceJson.put("oslc:label", newResource.toString());
                // End of user code
                oslcResponse.put("oslc:results", new Object[]{newResourceJson});

                out.print(oslcResponse.toString());
                out.close();
            }
        } catch (Exception e) {
            e.printStackTrace();
            throw new WebApplicationException(e);
        }
    }
    /**
     * OSLC delegated creation dialog for a single resource
     *
     * @throws IOException
     * @throws ServletException
     */
    @GET
    @Path("create_change_notice")
    @Consumes({MediaType.WILDCARD})
    public void ChangeNoticeCreator(
                @PathParam("serviceProviderId") final String serviceProviderId
        ) throws IOException, ServletException
    {
        // Start of user code ChangeNoticeCreator
        // End of user code

        httpServletRequest.setAttribute("creatorUri", UriBuilder.fromUri(OSLC4JUtils.getServletURI()).path(uriInfo.getPath()).build().toString());
        httpServletRequest.setAttribute("serviceProviderId", serviceProviderId);

        RequestDispatcher rd = httpServletRequest.getRequestDispatcher("/co/oslc/refimpl/cm/gen/changenoticecreator.jsp");
        rd.forward(httpServletRequest, httpServletResponse);
    }

    /**
     * Backend creator for the OSLC delegated creation dialog.
     *
     * Accepts the input in FormParams and returns a small JSON response
     */
    @OslcDialog
    (
         title = "ChangeNoticeDlgCr",
         label = "Change Notice Creation Dialog",
         uri = "serviceProviders/{serviceProviderId}/resources/create_change_notice",
         hintWidth = "0px",
         hintHeight = "0px",
         resourceTypes = {Oslc_cmDomainConstants.CHANGENOTICE_TYPE},
         usages = {}
    )
    @POST
    @Path("create_change_notice")
    @Consumes({ MediaType.APPLICATION_FORM_URLENCODED})
    public void createChangeNoticeFromDialog(
            @PathParam("serviceProviderId") final String serviceProviderId
        ) {
        try {
            ChangeNotice newResource = null;

            ChangeNotice aResource = new ChangeNotice();

            String[] paramValues;

            paramValues = httpServletRequest.getParameterValues("shortTitle");
            if (paramValues != null) {
                    if (paramValues.length == 1) {
                        if (paramValues[0].length() != 0)
                            aResource.setShortTitle(paramValues[0]);
                        // else, there is an empty value for that parameter, and hence ignore since the parameter is not actually set.
                    }

            }
            paramValues = httpServletRequest.getParameterValues("description");
            if (paramValues != null) {
                    if (paramValues.length == 1) {
                        if (paramValues[0].length() != 0)
                            aResource.setDescription(paramValues[0]);
                        // else, there is an empty value for that parameter, and hence ignore since the parameter is not actually set.
                    }

            }
            paramValues = httpServletRequest.getParameterValues("title");
            if (paramValues != null) {
                    if (paramValues.length == 1) {
                        if (paramValues[0].length() != 0)
                            aResource.setTitle(paramValues[0]);
                        // else, there is an empty value for that parameter, and hence ignore since the parameter is not actually set.
                    }

            }
            paramValues = httpServletRequest.getParameterValues("identifier");
            if (paramValues != null) {
                    if (paramValues.length == 1) {
                        if (paramValues[0].length() != 0)
                            aResource.setIdentifier(paramValues[0]);
                        // else, there is an empty value for that parameter, and hence ignore since the parameter is not actually set.
                    }

            }
            paramValues = httpServletRequest.getParameterValues("subject");
            if (paramValues != null) {
                    for(int i=0; i<paramValues.length; i++) {
                        aResource.addSubject(paramValues[i]);
                    }
            }
            paramValues = httpServletRequest.getParameterValues("creator");
            if (paramValues != null) {
                    for(int i=0; i<paramValues.length; i++) {
                        aResource.addCreator(new Link(new URI(paramValues[i])));
                    }
            }
            paramValues = httpServletRequest.getParameterValues("contributor");
            if (paramValues != null) {
                    for(int i=0; i<paramValues.length; i++) {
                        aResource.addContributor(new Link(new URI(paramValues[i])));
                    }
            }
            paramValues = httpServletRequest.getParameterValues("created");
            if (paramValues != null) {
                    if (paramValues.length == 1) {
                        if (paramValues[0].length() != 0)
                            aResource.setCreated(new SimpleDateFormat("M/D/y").parse(paramValues[0]));
                        // else, there is an empty value for that parameter, and hence ignore since the parameter is not actually set.
                    }

            }
            paramValues = httpServletRequest.getParameterValues("modified");
            if (paramValues != null) {
                    if (paramValues.length == 1) {
                        if (paramValues[0].length() != 0)
                            aResource.setModified(new SimpleDateFormat("M/D/y").parse(paramValues[0]));
                        // else, there is an empty value for that parameter, and hence ignore since the parameter is not actually set.
                    }

            }
            paramValues = httpServletRequest.getParameterValues("serviceProvider");
            if (paramValues != null) {
                    for(int i=0; i<paramValues.length; i++) {
                        aResource.addServiceProvider(new Link(new URI(paramValues[i])));
                    }
            }
            paramValues = httpServletRequest.getParameterValues("instanceShape");
            if (paramValues != null) {
                    for(int i=0; i<paramValues.length; i++) {
                        aResource.addInstanceShape(new Link(new URI(paramValues[i])));
                    }
            }
            paramValues = httpServletRequest.getParameterValues("discussedBy");
            if (paramValues != null) {
                    if (paramValues.length == 1) {
                        if (paramValues[0].length() != 0)
                            aResource.setDiscussedBy(new Link(new URI(paramValues[0])));
                        // else, there is an empty value for that parameter, and hence ignore since the parameter is not actually set.
                    }

            }
            paramValues = httpServletRequest.getParameterValues("closeDate");
            if (paramValues != null) {
                    if (paramValues.length == 1) {
                        if (paramValues[0].length() != 0)
                            aResource.setCloseDate(new SimpleDateFormat("M/D/y").parse(paramValues[0]));
                        // else, there is an empty value for that parameter, and hence ignore since the parameter is not actually set.
                    }

            }
            paramValues = httpServletRequest.getParameterValues("status");
            if (paramValues != null) {
                    if (paramValues.length == 1) {
                        if (paramValues[0].length() != 0)
                            aResource.setStatus(paramValues[0]);
                        // else, there is an empty value for that parameter, and hence ignore since the parameter is not actually set.
                    }

            }
            paramValues = httpServletRequest.getParameterValues("closed");
            if (paramValues != null) {
                    if (paramValues.length == 1) {
                        if (paramValues[0].length() != 0)
                            aResource.setClosed(new Boolean(paramValues[0]));
                        // else, there is an empty value for that parameter, and hence ignore since the parameter is not actually set.
                    }

            }
            paramValues = httpServletRequest.getParameterValues("inProgress");
            if (paramValues != null) {
                    if (paramValues.length == 1) {
                        if (paramValues[0].length() != 0)
                            aResource.setInProgress(new Boolean(paramValues[0]));
                        // else, there is an empty value for that parameter, and hence ignore since the parameter is not actually set.
                    }

            }
            paramValues = httpServletRequest.getParameterValues("fixed");
            if (paramValues != null) {
                    if (paramValues.length == 1) {
                        if (paramValues[0].length() != 0)
                            aResource.setFixed(new Boolean(paramValues[0]));
                        // else, there is an empty value for that parameter, and hence ignore since the parameter is not actually set.
                    }

            }
            paramValues = httpServletRequest.getParameterValues("approved");
            if (paramValues != null) {
                    if (paramValues.length == 1) {
                        if (paramValues[0].length() != 0)
                            aResource.setApproved(new Boolean(paramValues[0]));
                        // else, there is an empty value for that parameter, and hence ignore since the parameter is not actually set.
                    }

            }
            paramValues = httpServletRequest.getParameterValues("reviewed");
            if (paramValues != null) {
                    if (paramValues.length == 1) {
                        if (paramValues[0].length() != 0)
                            aResource.setReviewed(new Boolean(paramValues[0]));
                        // else, there is an empty value for that parameter, and hence ignore since the parameter is not actually set.
                    }

            }
            paramValues = httpServletRequest.getParameterValues("verified");
            if (paramValues != null) {
                    if (paramValues.length == 1) {
                        if (paramValues[0].length() != 0)
                            aResource.setVerified(new Boolean(paramValues[0]));
                        // else, there is an empty value for that parameter, and hence ignore since the parameter is not actually set.
                    }

            }
            paramValues = httpServletRequest.getParameterValues("relatedChangeRequest");
            if (paramValues != null) {
                    for(int i=0; i<paramValues.length; i++) {
                        aResource.addRelatedChangeRequest(new Link(new URI(paramValues[i])));
                    }
            }
            paramValues = httpServletRequest.getParameterValues("affectsPlanItem");
            if (paramValues != null) {
                    for(int i=0; i<paramValues.length; i++) {
                        aResource.addAffectsPlanItem(new Link(new URI(paramValues[i])));
                    }
            }
            paramValues = httpServletRequest.getParameterValues("affectedByDefect");
            if (paramValues != null) {
                    for(int i=0; i<paramValues.length; i++) {
                        aResource.addAffectedByDefect(new Link(new URI(paramValues[i])));
                    }
            }
            paramValues = httpServletRequest.getParameterValues("tracksRequirement");
            if (paramValues != null) {
                    for(int i=0; i<paramValues.length; i++) {
                        aResource.addTracksRequirement(new Link(new URI(paramValues[i])));
                    }
            }
            paramValues = httpServletRequest.getParameterValues("implementsRequirement");
            if (paramValues != null) {
                    for(int i=0; i<paramValues.length; i++) {
                        aResource.addImplementsRequirement(new Link(new URI(paramValues[i])));
                    }
            }
            paramValues = httpServletRequest.getParameterValues("affectsRequirement");
            if (paramValues != null) {
                    for(int i=0; i<paramValues.length; i++) {
                        aResource.addAffectsRequirement(new Link(new URI(paramValues[i])));
                    }
            }
            paramValues = httpServletRequest.getParameterValues("tracksChangeSet");
            if (paramValues != null) {
                    for(int i=0; i<paramValues.length; i++) {
                        aResource.addTracksChangeSet(new Link(new URI(paramValues[i])));
                    }
            }
            paramValues = httpServletRequest.getParameterValues("parent");
            if (paramValues != null) {
                    for(int i=0; i<paramValues.length; i++) {
                        aResource.addParent(new Link(new URI(paramValues[i])));
                    }
            }
            paramValues = httpServletRequest.getParameterValues("priority");
            if (paramValues != null) {
                    for(int i=0; i<paramValues.length; i++) {
                        aResource.addPriority(new Link(new URI(paramValues[i])));
                    }
            }
            paramValues = httpServletRequest.getParameterValues("state");
            if (paramValues != null) {
                    if (paramValues.length == 1) {
                        if (paramValues[0].length() != 0)
                            aResource.setState(new Link(new URI(paramValues[0])));
                        // else, there is an empty value for that parameter, and hence ignore since the parameter is not actually set.
                    }

            }
            paramValues = httpServletRequest.getParameterValues("authorizer");
            if (paramValues != null) {
                    for(int i=0; i<paramValues.length; i++) {
                        aResource.addAuthorizer(new Link(new URI(paramValues[i])));
                    }
            }

            newResource = CMManager.createChangeNoticeFromDialog(httpServletRequest, aResource, serviceProviderId);

            if (newResource != null) {
                httpServletRequest.setAttribute("newResource", newResource);
                httpServletRequest.setAttribute("newResourceUri", newResource.getAbout().toString());

                // Send back to the form a small JSON response
                httpServletResponse.setContentType("application/json");
                httpServletResponse.setStatus(Status.CREATED.getStatusCode());
                httpServletResponse.addHeader("Location", newResource.getAbout().toString());
                PrintWriter out = httpServletResponse.getWriter();

                JSONObject oslcResponse = new JSONObject();
                JSONObject newResourceJson = new JSONObject();
                newResourceJson.put("rdf:resource", newResource.getAbout().toString());
                // Start of user code OSLC Resource Label
                newResourceJson.put("oslc:label", newResource.toString());
                // End of user code
                oslcResponse.put("oslc:results", new Object[]{newResourceJson});

                out.print(oslcResponse.toString());
                out.close();
            }
        } catch (Exception e) {
            e.printStackTrace();
            throw new WebApplicationException(e);
        }
    }
    /**
     * OSLC delegated creation dialog for a single resource
     *
     * @throws IOException
     * @throws ServletException
     */
    @GET
    @Path("create_enhancement")
    @Consumes({MediaType.WILDCARD})
    public void EnhancementCreator(
                @PathParam("serviceProviderId") final String serviceProviderId
        ) throws IOException, ServletException
    {
        // Start of user code EnhancementCreator
        // End of user code

        httpServletRequest.setAttribute("creatorUri", UriBuilder.fromUri(OSLC4JUtils.getServletURI()).path(uriInfo.getPath()).build().toString());
        httpServletRequest.setAttribute("serviceProviderId", serviceProviderId);

        RequestDispatcher rd = httpServletRequest.getRequestDispatcher("/co/oslc/refimpl/cm/gen/enhancementcreator.jsp");
        rd.forward(httpServletRequest, httpServletResponse);
    }

    /**
     * Backend creator for the OSLC delegated creation dialog.
     *
     * Accepts the input in FormParams and returns a small JSON response
     */
    @OslcDialog
    (
         title = "EnhancementDlgCr",
         label = "Enhancement Creation Dialog",
         uri = "serviceProviders/{serviceProviderId}/resources/create_enhancement",
         hintWidth = "0px",
         hintHeight = "0px",
         resourceTypes = {Oslc_cmDomainConstants.ENHANCEMENT_TYPE},
         usages = {}
    )
    @POST
    @Path("create_enhancement")
    @Consumes({ MediaType.APPLICATION_FORM_URLENCODED})
    public void createEnhancementFromDialog(
            @PathParam("serviceProviderId") final String serviceProviderId
        ) {
        try {
            Enhancement newResource = null;

            Enhancement aResource = new Enhancement();

            String[] paramValues;

            paramValues = httpServletRequest.getParameterValues("shortTitle");
            if (paramValues != null) {
                    if (paramValues.length == 1) {
                        if (paramValues[0].length() != 0)
                            aResource.setShortTitle(paramValues[0]);
                        // else, there is an empty value for that parameter, and hence ignore since the parameter is not actually set.
                    }

            }
            paramValues = httpServletRequest.getParameterValues("description");
            if (paramValues != null) {
                    if (paramValues.length == 1) {
                        if (paramValues[0].length() != 0)
                            aResource.setDescription(paramValues[0]);
                        // else, there is an empty value for that parameter, and hence ignore since the parameter is not actually set.
                    }

            }
            paramValues = httpServletRequest.getParameterValues("title");
            if (paramValues != null) {
                    if (paramValues.length == 1) {
                        if (paramValues[0].length() != 0)
                            aResource.setTitle(paramValues[0]);
                        // else, there is an empty value for that parameter, and hence ignore since the parameter is not actually set.
                    }

            }
            paramValues = httpServletRequest.getParameterValues("identifier");
            if (paramValues != null) {
                    if (paramValues.length == 1) {
                        if (paramValues[0].length() != 0)
                            aResource.setIdentifier(paramValues[0]);
                        // else, there is an empty value for that parameter, and hence ignore since the parameter is not actually set.
                    }

            }
            paramValues = httpServletRequest.getParameterValues("subject");
            if (paramValues != null) {
                    for(int i=0; i<paramValues.length; i++) {
                        aResource.addSubject(paramValues[i]);
                    }
            }
            paramValues = httpServletRequest.getParameterValues("creator");
            if (paramValues != null) {
                    for(int i=0; i<paramValues.length; i++) {
                        aResource.addCreator(new Link(new URI(paramValues[i])));
                    }
            }
            paramValues = httpServletRequest.getParameterValues("contributor");
            if (paramValues != null) {
                    for(int i=0; i<paramValues.length; i++) {
                        aResource.addContributor(new Link(new URI(paramValues[i])));
                    }
            }
            paramValues = httpServletRequest.getParameterValues("created");
            if (paramValues != null) {
                    if (paramValues.length == 1) {
                        if (paramValues[0].length() != 0)
                            aResource.setCreated(new SimpleDateFormat("M/D/y").parse(paramValues[0]));
                        // else, there is an empty value for that parameter, and hence ignore since the parameter is not actually set.
                    }

            }
            paramValues = httpServletRequest.getParameterValues("modified");
            if (paramValues != null) {
                    if (paramValues.length == 1) {
                        if (paramValues[0].length() != 0)
                            aResource.setModified(new SimpleDateFormat("M/D/y").parse(paramValues[0]));
                        // else, there is an empty value for that parameter, and hence ignore since the parameter is not actually set.
                    }

            }
            paramValues = httpServletRequest.getParameterValues("serviceProvider");
            if (paramValues != null) {
                    for(int i=0; i<paramValues.length; i++) {
                        aResource.addServiceProvider(new Link(new URI(paramValues[i])));
                    }
            }
            paramValues = httpServletRequest.getParameterValues("instanceShape");
            if (paramValues != null) {
                    for(int i=0; i<paramValues.length; i++) {
                        aResource.addInstanceShape(new Link(new URI(paramValues[i])));
                    }
            }
            paramValues = httpServletRequest.getParameterValues("discussedBy");
            if (paramValues != null) {
                    if (paramValues.length == 1) {
                        if (paramValues[0].length() != 0)
                            aResource.setDiscussedBy(new Link(new URI(paramValues[0])));
                        // else, there is an empty value for that parameter, and hence ignore since the parameter is not actually set.
                    }

            }
            paramValues = httpServletRequest.getParameterValues("closeDate");
            if (paramValues != null) {
                    if (paramValues.length == 1) {
                        if (paramValues[0].length() != 0)
                            aResource.setCloseDate(new SimpleDateFormat("M/D/y").parse(paramValues[0]));
                        // else, there is an empty value for that parameter, and hence ignore since the parameter is not actually set.
                    }

            }
            paramValues = httpServletRequest.getParameterValues("status");
            if (paramValues != null) {
                    if (paramValues.length == 1) {
                        if (paramValues[0].length() != 0)
                            aResource.setStatus(paramValues[0]);
                        // else, there is an empty value for that parameter, and hence ignore since the parameter is not actually set.
                    }

            }
            paramValues = httpServletRequest.getParameterValues("closed");
            if (paramValues != null) {
                    if (paramValues.length == 1) {
                        if (paramValues[0].length() != 0)
                            aResource.setClosed(new Boolean(paramValues[0]));
                        // else, there is an empty value for that parameter, and hence ignore since the parameter is not actually set.
                    }

            }
            paramValues = httpServletRequest.getParameterValues("inProgress");
            if (paramValues != null) {
                    if (paramValues.length == 1) {
                        if (paramValues[0].length() != 0)
                            aResource.setInProgress(new Boolean(paramValues[0]));
                        // else, there is an empty value for that parameter, and hence ignore since the parameter is not actually set.
                    }

            }
            paramValues = httpServletRequest.getParameterValues("fixed");
            if (paramValues != null) {
                    if (paramValues.length == 1) {
                        if (paramValues[0].length() != 0)
                            aResource.setFixed(new Boolean(paramValues[0]));
                        // else, there is an empty value for that parameter, and hence ignore since the parameter is not actually set.
                    }

            }
            paramValues = httpServletRequest.getParameterValues("approved");
            if (paramValues != null) {
                    if (paramValues.length == 1) {
                        if (paramValues[0].length() != 0)
                            aResource.setApproved(new Boolean(paramValues[0]));
                        // else, there is an empty value for that parameter, and hence ignore since the parameter is not actually set.
                    }

            }
            paramValues = httpServletRequest.getParameterValues("reviewed");
            if (paramValues != null) {
                    if (paramValues.length == 1) {
                        if (paramValues[0].length() != 0)
                            aResource.setReviewed(new Boolean(paramValues[0]));
                        // else, there is an empty value for that parameter, and hence ignore since the parameter is not actually set.
                    }

            }
            paramValues = httpServletRequest.getParameterValues("verified");
            if (paramValues != null) {
                    if (paramValues.length == 1) {
                        if (paramValues[0].length() != 0)
                            aResource.setVerified(new Boolean(paramValues[0]));
                        // else, there is an empty value for that parameter, and hence ignore since the parameter is not actually set.
                    }

            }
            paramValues = httpServletRequest.getParameterValues("relatedChangeRequest");
            if (paramValues != null) {
                    for(int i=0; i<paramValues.length; i++) {
                        aResource.addRelatedChangeRequest(new Link(new URI(paramValues[i])));
                    }
            }
            paramValues = httpServletRequest.getParameterValues("affectsPlanItem");
            if (paramValues != null) {
                    for(int i=0; i<paramValues.length; i++) {
                        aResource.addAffectsPlanItem(new Link(new URI(paramValues[i])));
                    }
            }
            paramValues = httpServletRequest.getParameterValues("affectedByDefect");
            if (paramValues != null) {
                    for(int i=0; i<paramValues.length; i++) {
                        aResource.addAffectedByDefect(new Link(new URI(paramValues[i])));
                    }
            }
            paramValues = httpServletRequest.getParameterValues("tracksRequirement");
            if (paramValues != null) {
                    for(int i=0; i<paramValues.length; i++) {
                        aResource.addTracksRequirement(new Link(new URI(paramValues[i])));
                    }
            }
            paramValues = httpServletRequest.getParameterValues("implementsRequirement");
            if (paramValues != null) {
                    for(int i=0; i<paramValues.length; i++) {
                        aResource.addImplementsRequirement(new Link(new URI(paramValues[i])));
                    }
            }
            paramValues = httpServletRequest.getParameterValues("affectsRequirement");
            if (paramValues != null) {
                    for(int i=0; i<paramValues.length; i++) {
                        aResource.addAffectsRequirement(new Link(new URI(paramValues[i])));
                    }
            }
            paramValues = httpServletRequest.getParameterValues("tracksChangeSet");
            if (paramValues != null) {
                    for(int i=0; i<paramValues.length; i++) {
                        aResource.addTracksChangeSet(new Link(new URI(paramValues[i])));
                    }
            }
            paramValues = httpServletRequest.getParameterValues("parent");
            if (paramValues != null) {
                    for(int i=0; i<paramValues.length; i++) {
                        aResource.addParent(new Link(new URI(paramValues[i])));
                    }
            }
            paramValues = httpServletRequest.getParameterValues("priority");
            if (paramValues != null) {
                    for(int i=0; i<paramValues.length; i++) {
                        aResource.addPriority(new Link(new URI(paramValues[i])));
                    }
            }
            paramValues = httpServletRequest.getParameterValues("state");
            if (paramValues != null) {
                    if (paramValues.length == 1) {
                        if (paramValues[0].length() != 0)
                            aResource.setState(new Link(new URI(paramValues[0])));
                        // else, there is an empty value for that parameter, and hence ignore since the parameter is not actually set.
                    }

            }
            paramValues = httpServletRequest.getParameterValues("authorizer");
            if (paramValues != null) {
                    for(int i=0; i<paramValues.length; i++) {
                        aResource.addAuthorizer(new Link(new URI(paramValues[i])));
                    }
            }

            newResource = CMManager.createEnhancementFromDialog(httpServletRequest, aResource, serviceProviderId);

            if (newResource != null) {
                httpServletRequest.setAttribute("newResource", newResource);
                httpServletRequest.setAttribute("newResourceUri", newResource.getAbout().toString());

                // Send back to the form a small JSON response
                httpServletResponse.setContentType("application/json");
                httpServletResponse.setStatus(Status.CREATED.getStatusCode());
                httpServletResponse.addHeader("Location", newResource.getAbout().toString());
                PrintWriter out = httpServletResponse.getWriter();

                JSONObject oslcResponse = new JSONObject();
                JSONObject newResourceJson = new JSONObject();
                newResourceJson.put("rdf:resource", newResource.getAbout().toString());
                // Start of user code OSLC Resource Label
                newResourceJson.put("oslc:label", newResource.toString());
                // End of user code
                oslcResponse.put("oslc:results", new Object[]{newResourceJson});

                out.print(oslcResponse.toString());
                out.close();
            }
        } catch (Exception e) {
            e.printStackTrace();
            throw new WebApplicationException(e);
        }
    }
    @GET
    @Path("changeRequests/{changeRequestId}")
    @Produces({OslcMediaType.APPLICATION_RDF_XML, OslcMediaType.APPLICATION_JSON_LD, OslcMediaType.TEXT_TURTLE, OslcMediaType.APPLICATION_XML, OslcMediaType.APPLICATION_JSON})
    public ChangeRequest getChangeRequest(
                @PathParam("serviceProviderId") final String serviceProviderId, @PathParam("changeRequestId") final String changeRequestId
        ) throws IOException, ServletException, URISyntaxException
    {
        // Start of user code getResource_init
        // End of user code

        final ChangeRequest aChangeRequest = CMManager.getChangeRequest(httpServletRequest, serviceProviderId, changeRequestId);

        if (aChangeRequest != null) {
            // Start of user code getChangeRequest
            // End of user code
            httpServletResponse.addHeader(CMConstants.HDR_OSLC_VERSION, CMConstants.OSLC_VERSION_V2);
            return aChangeRequest;
        }

        throw new WebApplicationException(Status.NOT_FOUND);
    }

    @GET
    @Path("changeRequests/{changeRequestId}")
    @Produces({ MediaType.TEXT_HTML })
    public Response getChangeRequestAsHtml(
        @PathParam("serviceProviderId") final String serviceProviderId, @PathParam("changeRequestId") final String changeRequestId
        ) throws ServletException, IOException, URISyntaxException
    {
        // Start of user code getChangeRequestAsHtml_init
        // End of user code

        final ChangeRequest aChangeRequest = CMManager.getChangeRequest(httpServletRequest, serviceProviderId, changeRequestId);

        if (aChangeRequest != null) {
            httpServletRequest.setAttribute("aChangeRequest", aChangeRequest);
            // Start of user code getChangeRequestAsHtml_setAttributes
            // End of user code

            RequestDispatcher rd = httpServletRequest.getRequestDispatcher("/co/oslc/refimpl/cm/gen/changerequest.jsp");
            rd.forward(httpServletRequest,httpServletResponse);
        }

        throw new WebApplicationException(Status.NOT_FOUND);
    }

    @GET
    @Path("changeRequests/{changeRequestId}")
    @Produces({OslcMediaType.APPLICATION_X_OSLC_COMPACT_XML})
    public Compact getChangeRequestCompact(
        @PathParam("serviceProviderId") final String serviceProviderId, @PathParam("changeRequestId") final String changeRequestId
        ) throws ServletException, IOException, URISyntaxException
    {
        String iconUri = OSLC4JUtils.getPublicURI() + "/images/ui_preview_icon.gif";
        String smallPreviewHintHeight = "10em";
        String smallPreviewHintWidth = "45em";
        String largePreviewHintHeight = "20em";
        String largePreviewHintWidth = "45em";

        // Start of user code getChangeRequestCompact_init
        //TODO: adjust the preview height & width values from the default values provided above.
        // End of user code

        final ChangeRequest aChangeRequest = CMManager.getChangeRequest(httpServletRequest, serviceProviderId, changeRequestId);

        if (aChangeRequest != null) {
            final Compact compact = new Compact();

            compact.setAbout(aChangeRequest.getAbout());
            compact.setTitle(aChangeRequest.toString());

            compact.setIcon(new URI(iconUri));

            //Create and set attributes for OSLC preview resource
            final Preview smallPreview = new Preview();
            smallPreview.setHintHeight(smallPreviewHintHeight);
            smallPreview.setHintWidth(smallPreviewHintWidth);
            smallPreview.setDocument(UriBuilder.fromUri(aChangeRequest.getAbout()).path("smallPreview").build());
            compact.setSmallPreview(smallPreview);

            final Preview largePreview = new Preview();
            largePreview.setHintHeight(largePreviewHintHeight);
            largePreview.setHintWidth(largePreviewHintWidth);
            largePreview.setDocument(UriBuilder.fromUri(aChangeRequest.getAbout()).path("largePreview").build());
            compact.setLargePreview(largePreview);

            httpServletResponse.addHeader(CMConstants.HDR_OSLC_VERSION, CMConstants.OSLC_VERSION_V2);
            addCORSHeaders(httpServletResponse);
            return compact;
        }
        throw new WebApplicationException(Status.NOT_FOUND);
    }

    @GET
    @Path("changeRequests/{changeRequestId}/smallPreview")
    @Produces({ MediaType.TEXT_HTML })
    public void getChangeRequestAsHtmlSmallPreview(
        @PathParam("serviceProviderId") final String serviceProviderId, @PathParam("changeRequestId") final String changeRequestId
        ) throws ServletException, IOException, URISyntaxException
    {
        // Start of user code getChangeRequestAsHtmlSmallPreview_init
        // End of user code

        final ChangeRequest aChangeRequest = CMManager.getChangeRequest(httpServletRequest, serviceProviderId, changeRequestId);

        if (aChangeRequest != null) {
            httpServletRequest.setAttribute("aChangeRequest", aChangeRequest);
            // Start of user code getChangeRequestAsHtmlSmallPreview_setAttributes
            // End of user code

            RequestDispatcher rd = httpServletRequest.getRequestDispatcher("/co/oslc/refimpl/cm/gen/changerequestsmallpreview.jsp");
            httpServletResponse.addHeader(CMConstants.HDR_OSLC_VERSION, CMConstants.OSLC_VERSION_V2);
            addCORSHeaders(httpServletResponse);
            rd.forward(httpServletRequest, httpServletResponse);
        }

        throw new WebApplicationException(Status.NOT_FOUND);
    }

    @GET
    @Path("changeRequests/{changeRequestId}/largePreview")
    @Produces({ MediaType.TEXT_HTML })
    public void getChangeRequestAsHtmlLargePreview(
        @PathParam("serviceProviderId") final String serviceProviderId, @PathParam("changeRequestId") final String changeRequestId
        ) throws ServletException, IOException, URISyntaxException
    {
        // Start of user code getChangeRequestAsHtmlLargePreview_init
        // End of user code

        final ChangeRequest aChangeRequest = CMManager.getChangeRequest(httpServletRequest, serviceProviderId, changeRequestId);

        if (aChangeRequest != null) {
            httpServletRequest.setAttribute("aChangeRequest", aChangeRequest);
            // Start of user code getChangeRequestAsHtmlLargePreview_setAttributes
            // End of user code

            RequestDispatcher rd = httpServletRequest.getRequestDispatcher("/co/oslc/refimpl/cm/gen/changerequestlargepreview.jsp");
            httpServletResponse.addHeader(CMConstants.HDR_OSLC_VERSION, CMConstants.OSLC_VERSION_V2);
            addCORSHeaders(httpServletResponse);
            rd.forward(httpServletRequest, httpServletResponse);
        }

        throw new WebApplicationException(Status.NOT_FOUND);
    }
    @GET
    @Path("defects/{defectId}")
    @Produces({OslcMediaType.APPLICATION_RDF_XML, OslcMediaType.APPLICATION_JSON_LD, OslcMediaType.TEXT_TURTLE, OslcMediaType.APPLICATION_XML, OslcMediaType.APPLICATION_JSON})
    public Defect getDefect(
                @PathParam("serviceProviderId") final String serviceProviderId, @PathParam("defectId") final String defectId
        ) throws IOException, ServletException, URISyntaxException
    {
        // Start of user code getResource_init
        // End of user code

        final Defect aDefect = CMManager.getDefect(httpServletRequest, serviceProviderId, defectId);

        if (aDefect != null) {
            // Start of user code getDefect
            // End of user code
            httpServletResponse.addHeader(CMConstants.HDR_OSLC_VERSION, CMConstants.OSLC_VERSION_V2);
            return aDefect;
        }

        throw new WebApplicationException(Status.NOT_FOUND);
    }

    @GET
    @Path("defects/{defectId}")
    @Produces({ MediaType.TEXT_HTML })
    public Response getDefectAsHtml(
        @PathParam("serviceProviderId") final String serviceProviderId, @PathParam("defectId") final String defectId
        ) throws ServletException, IOException, URISyntaxException
    {
        // Start of user code getDefectAsHtml_init
        // End of user code

        final Defect aDefect = CMManager.getDefect(httpServletRequest, serviceProviderId, defectId);

        if (aDefect != null) {
            httpServletRequest.setAttribute("aDefect", aDefect);
            // Start of user code getDefectAsHtml_setAttributes
            // End of user code

            RequestDispatcher rd = httpServletRequest.getRequestDispatcher("/co/oslc/refimpl/cm/gen/defect.jsp");
            rd.forward(httpServletRequest,httpServletResponse);
        }

        throw new WebApplicationException(Status.NOT_FOUND);
    }

    @GET
    @Path("defects/{defectId}")
    @Produces({OslcMediaType.APPLICATION_X_OSLC_COMPACT_XML})
    public Compact getDefectCompact(
        @PathParam("serviceProviderId") final String serviceProviderId, @PathParam("defectId") final String defectId
        ) throws ServletException, IOException, URISyntaxException
    {
        String iconUri = OSLC4JUtils.getPublicURI() + "/images/ui_preview_icon.gif";
        String smallPreviewHintHeight = "10em";
        String smallPreviewHintWidth = "45em";
        String largePreviewHintHeight = "20em";
        String largePreviewHintWidth = "45em";

        // Start of user code getDefectCompact_init
        //TODO: adjust the preview height & width values from the default values provided above.
        // End of user code

        final Defect aDefect = CMManager.getDefect(httpServletRequest, serviceProviderId, defectId);

        if (aDefect != null) {
            final Compact compact = new Compact();

            compact.setAbout(aDefect.getAbout());
            compact.setTitle(aDefect.toString());

            compact.setIcon(new URI(iconUri));

            //Create and set attributes for OSLC preview resource
            final Preview smallPreview = new Preview();
            smallPreview.setHintHeight(smallPreviewHintHeight);
            smallPreview.setHintWidth(smallPreviewHintWidth);
            smallPreview.setDocument(UriBuilder.fromUri(aDefect.getAbout()).path("smallPreview").build());
            compact.setSmallPreview(smallPreview);

            final Preview largePreview = new Preview();
            largePreview.setHintHeight(largePreviewHintHeight);
            largePreview.setHintWidth(largePreviewHintWidth);
            largePreview.setDocument(UriBuilder.fromUri(aDefect.getAbout()).path("largePreview").build());
            compact.setLargePreview(largePreview);

            httpServletResponse.addHeader(CMConstants.HDR_OSLC_VERSION, CMConstants.OSLC_VERSION_V2);
            addCORSHeaders(httpServletResponse);
            return compact;
        }
        throw new WebApplicationException(Status.NOT_FOUND);
    }

    @GET
    @Path("defects/{defectId}/smallPreview")
    @Produces({ MediaType.TEXT_HTML })
    public void getDefectAsHtmlSmallPreview(
        @PathParam("serviceProviderId") final String serviceProviderId, @PathParam("defectId") final String defectId
        ) throws ServletException, IOException, URISyntaxException
    {
        // Start of user code getDefectAsHtmlSmallPreview_init
        // End of user code

        final Defect aDefect = CMManager.getDefect(httpServletRequest, serviceProviderId, defectId);

        if (aDefect != null) {
            httpServletRequest.setAttribute("aDefect", aDefect);
            // Start of user code getDefectAsHtmlSmallPreview_setAttributes
            // End of user code

            RequestDispatcher rd = httpServletRequest.getRequestDispatcher("/co/oslc/refimpl/cm/gen/defectsmallpreview.jsp");
            httpServletResponse.addHeader(CMConstants.HDR_OSLC_VERSION, CMConstants.OSLC_VERSION_V2);
            addCORSHeaders(httpServletResponse);
            rd.forward(httpServletRequest, httpServletResponse);
        }

        throw new WebApplicationException(Status.NOT_FOUND);
    }

    @GET
    @Path("defects/{defectId}/largePreview")
    @Produces({ MediaType.TEXT_HTML })
    public void getDefectAsHtmlLargePreview(
        @PathParam("serviceProviderId") final String serviceProviderId, @PathParam("defectId") final String defectId
        ) throws ServletException, IOException, URISyntaxException
    {
        // Start of user code getDefectAsHtmlLargePreview_init
        // End of user code

        final Defect aDefect = CMManager.getDefect(httpServletRequest, serviceProviderId, defectId);

        if (aDefect != null) {
            httpServletRequest.setAttribute("aDefect", aDefect);
            // Start of user code getDefectAsHtmlLargePreview_setAttributes
            // End of user code

            RequestDispatcher rd = httpServletRequest.getRequestDispatcher("/co/oslc/refimpl/cm/gen/defectlargepreview.jsp");
            httpServletResponse.addHeader(CMConstants.HDR_OSLC_VERSION, CMConstants.OSLC_VERSION_V2);
            addCORSHeaders(httpServletResponse);
            rd.forward(httpServletRequest, httpServletResponse);
        }

        throw new WebApplicationException(Status.NOT_FOUND);
    }
    @GET
    @Path("tasks/{taskId}")
    @Produces({OslcMediaType.APPLICATION_RDF_XML, OslcMediaType.APPLICATION_JSON_LD, OslcMediaType.TEXT_TURTLE, OslcMediaType.APPLICATION_XML, OslcMediaType.APPLICATION_JSON})
    public Task getTask(
                @PathParam("serviceProviderId") final String serviceProviderId, @PathParam("taskId") final String taskId
        ) throws IOException, ServletException, URISyntaxException
    {
        // Start of user code getResource_init
        // End of user code

        final Task aTask = CMManager.getTask(httpServletRequest, serviceProviderId, taskId);

        if (aTask != null) {
            // Start of user code getTask
            // End of user code
            httpServletResponse.addHeader(CMConstants.HDR_OSLC_VERSION, CMConstants.OSLC_VERSION_V2);
            return aTask;
        }

        throw new WebApplicationException(Status.NOT_FOUND);
    }

    @GET
    @Path("tasks/{taskId}")
    @Produces({ MediaType.TEXT_HTML })
    public Response getTaskAsHtml(
        @PathParam("serviceProviderId") final String serviceProviderId, @PathParam("taskId") final String taskId
        ) throws ServletException, IOException, URISyntaxException
    {
        // Start of user code getTaskAsHtml_init
        // End of user code

        final Task aTask = CMManager.getTask(httpServletRequest, serviceProviderId, taskId);

        if (aTask != null) {
            httpServletRequest.setAttribute("aTask", aTask);
            // Start of user code getTaskAsHtml_setAttributes
            // End of user code

            RequestDispatcher rd = httpServletRequest.getRequestDispatcher("/co/oslc/refimpl/cm/gen/task.jsp");
            rd.forward(httpServletRequest,httpServletResponse);
        }

        throw new WebApplicationException(Status.NOT_FOUND);
    }

    @GET
    @Path("tasks/{taskId}")
    @Produces({OslcMediaType.APPLICATION_X_OSLC_COMPACT_XML})
    public Compact getTaskCompact(
        @PathParam("serviceProviderId") final String serviceProviderId, @PathParam("taskId") final String taskId
        ) throws ServletException, IOException, URISyntaxException
    {
        String iconUri = OSLC4JUtils.getPublicURI() + "/images/ui_preview_icon.gif";
        String smallPreviewHintHeight = "10em";
        String smallPreviewHintWidth = "45em";
        String largePreviewHintHeight = "20em";
        String largePreviewHintWidth = "45em";

        // Start of user code getTaskCompact_init
        //TODO: adjust the preview height & width values from the default values provided above.
        // End of user code

        final Task aTask = CMManager.getTask(httpServletRequest, serviceProviderId, taskId);

        if (aTask != null) {
            final Compact compact = new Compact();

            compact.setAbout(aTask.getAbout());
            compact.setTitle(aTask.toString());

            compact.setIcon(new URI(iconUri));

            //Create and set attributes for OSLC preview resource
            final Preview smallPreview = new Preview();
            smallPreview.setHintHeight(smallPreviewHintHeight);
            smallPreview.setHintWidth(smallPreviewHintWidth);
            smallPreview.setDocument(UriBuilder.fromUri(aTask.getAbout()).path("smallPreview").build());
            compact.setSmallPreview(smallPreview);

            final Preview largePreview = new Preview();
            largePreview.setHintHeight(largePreviewHintHeight);
            largePreview.setHintWidth(largePreviewHintWidth);
            largePreview.setDocument(UriBuilder.fromUri(aTask.getAbout()).path("largePreview").build());
            compact.setLargePreview(largePreview);

            httpServletResponse.addHeader(CMConstants.HDR_OSLC_VERSION, CMConstants.OSLC_VERSION_V2);
            addCORSHeaders(httpServletResponse);
            return compact;
        }
        throw new WebApplicationException(Status.NOT_FOUND);
    }

    @GET
    @Path("tasks/{taskId}/smallPreview")
    @Produces({ MediaType.TEXT_HTML })
    public void getTaskAsHtmlSmallPreview(
        @PathParam("serviceProviderId") final String serviceProviderId, @PathParam("taskId") final String taskId
        ) throws ServletException, IOException, URISyntaxException
    {
        // Start of user code getTaskAsHtmlSmallPreview_init
        // End of user code

        final Task aTask = CMManager.getTask(httpServletRequest, serviceProviderId, taskId);

        if (aTask != null) {
            httpServletRequest.setAttribute("aTask", aTask);
            // Start of user code getTaskAsHtmlSmallPreview_setAttributes
            // End of user code

            RequestDispatcher rd = httpServletRequest.getRequestDispatcher("/co/oslc/refimpl/cm/gen/tasksmallpreview.jsp");
            httpServletResponse.addHeader(CMConstants.HDR_OSLC_VERSION, CMConstants.OSLC_VERSION_V2);
            addCORSHeaders(httpServletResponse);
            rd.forward(httpServletRequest, httpServletResponse);
        }

        throw new WebApplicationException(Status.NOT_FOUND);
    }

    @GET
    @Path("tasks/{taskId}/largePreview")
    @Produces({ MediaType.TEXT_HTML })
    public void getTaskAsHtmlLargePreview(
        @PathParam("serviceProviderId") final String serviceProviderId, @PathParam("taskId") final String taskId
        ) throws ServletException, IOException, URISyntaxException
    {
        // Start of user code getTaskAsHtmlLargePreview_init
        // End of user code

        final Task aTask = CMManager.getTask(httpServletRequest, serviceProviderId, taskId);

        if (aTask != null) {
            httpServletRequest.setAttribute("aTask", aTask);
            // Start of user code getTaskAsHtmlLargePreview_setAttributes
            // End of user code

            RequestDispatcher rd = httpServletRequest.getRequestDispatcher("/co/oslc/refimpl/cm/gen/tasklargepreview.jsp");
            httpServletResponse.addHeader(CMConstants.HDR_OSLC_VERSION, CMConstants.OSLC_VERSION_V2);
            addCORSHeaders(httpServletResponse);
            rd.forward(httpServletRequest, httpServletResponse);
        }

        throw new WebApplicationException(Status.NOT_FOUND);
    }
    @GET
    @Path("reviewTasks/{reviewTaskId}")
    @Produces({OslcMediaType.APPLICATION_RDF_XML, OslcMediaType.APPLICATION_JSON_LD, OslcMediaType.TEXT_TURTLE, OslcMediaType.APPLICATION_XML, OslcMediaType.APPLICATION_JSON})
    public ReviewTask getReviewTask(
                @PathParam("serviceProviderId") final String serviceProviderId, @PathParam("reviewTaskId") final String reviewTaskId
        ) throws IOException, ServletException, URISyntaxException
    {
        // Start of user code getResource_init
        // End of user code

        final ReviewTask aReviewTask = CMManager.getReviewTask(httpServletRequest, serviceProviderId, reviewTaskId);

        if (aReviewTask != null) {
            // Start of user code getReviewTask
            // End of user code
            httpServletResponse.addHeader(CMConstants.HDR_OSLC_VERSION, CMConstants.OSLC_VERSION_V2);
            return aReviewTask;
        }

        throw new WebApplicationException(Status.NOT_FOUND);
    }

    @GET
    @Path("reviewTasks/{reviewTaskId}")
    @Produces({ MediaType.TEXT_HTML })
    public Response getReviewTaskAsHtml(
        @PathParam("serviceProviderId") final String serviceProviderId, @PathParam("reviewTaskId") final String reviewTaskId
        ) throws ServletException, IOException, URISyntaxException
    {
        // Start of user code getReviewTaskAsHtml_init
        // End of user code

        final ReviewTask aReviewTask = CMManager.getReviewTask(httpServletRequest, serviceProviderId, reviewTaskId);

        if (aReviewTask != null) {
            httpServletRequest.setAttribute("aReviewTask", aReviewTask);
            // Start of user code getReviewTaskAsHtml_setAttributes
            // End of user code

            RequestDispatcher rd = httpServletRequest.getRequestDispatcher("/co/oslc/refimpl/cm/gen/reviewtask.jsp");
            rd.forward(httpServletRequest,httpServletResponse);
        }

        throw new WebApplicationException(Status.NOT_FOUND);
    }

    @GET
    @Path("reviewTasks/{reviewTaskId}")
    @Produces({OslcMediaType.APPLICATION_X_OSLC_COMPACT_XML})
    public Compact getReviewTaskCompact(
        @PathParam("serviceProviderId") final String serviceProviderId, @PathParam("reviewTaskId") final String reviewTaskId
        ) throws ServletException, IOException, URISyntaxException
    {
        String iconUri = OSLC4JUtils.getPublicURI() + "/images/ui_preview_icon.gif";
        String smallPreviewHintHeight = "10em";
        String smallPreviewHintWidth = "45em";
        String largePreviewHintHeight = "20em";
        String largePreviewHintWidth = "45em";

        // Start of user code getReviewTaskCompact_init
        //TODO: adjust the preview height & width values from the default values provided above.
        // End of user code

        final ReviewTask aReviewTask = CMManager.getReviewTask(httpServletRequest, serviceProviderId, reviewTaskId);

        if (aReviewTask != null) {
            final Compact compact = new Compact();

            compact.setAbout(aReviewTask.getAbout());
            compact.setTitle(aReviewTask.toString());

            compact.setIcon(new URI(iconUri));

            //Create and set attributes for OSLC preview resource
            final Preview smallPreview = new Preview();
            smallPreview.setHintHeight(smallPreviewHintHeight);
            smallPreview.setHintWidth(smallPreviewHintWidth);
            smallPreview.setDocument(UriBuilder.fromUri(aReviewTask.getAbout()).path("smallPreview").build());
            compact.setSmallPreview(smallPreview);

            final Preview largePreview = new Preview();
            largePreview.setHintHeight(largePreviewHintHeight);
            largePreview.setHintWidth(largePreviewHintWidth);
            largePreview.setDocument(UriBuilder.fromUri(aReviewTask.getAbout()).path("largePreview").build());
            compact.setLargePreview(largePreview);

            httpServletResponse.addHeader(CMConstants.HDR_OSLC_VERSION, CMConstants.OSLC_VERSION_V2);
            addCORSHeaders(httpServletResponse);
            return compact;
        }
        throw new WebApplicationException(Status.NOT_FOUND);
    }

    @GET
    @Path("reviewTasks/{reviewTaskId}/smallPreview")
    @Produces({ MediaType.TEXT_HTML })
    public void getReviewTaskAsHtmlSmallPreview(
        @PathParam("serviceProviderId") final String serviceProviderId, @PathParam("reviewTaskId") final String reviewTaskId
        ) throws ServletException, IOException, URISyntaxException
    {
        // Start of user code getReviewTaskAsHtmlSmallPreview_init
        // End of user code

        final ReviewTask aReviewTask = CMManager.getReviewTask(httpServletRequest, serviceProviderId, reviewTaskId);

        if (aReviewTask != null) {
            httpServletRequest.setAttribute("aReviewTask", aReviewTask);
            // Start of user code getReviewTaskAsHtmlSmallPreview_setAttributes
            // End of user code

            RequestDispatcher rd = httpServletRequest.getRequestDispatcher("/co/oslc/refimpl/cm/gen/reviewtasksmallpreview.jsp");
            httpServletResponse.addHeader(CMConstants.HDR_OSLC_VERSION, CMConstants.OSLC_VERSION_V2);
            addCORSHeaders(httpServletResponse);
            rd.forward(httpServletRequest, httpServletResponse);
        }

        throw new WebApplicationException(Status.NOT_FOUND);
    }

    @GET
    @Path("reviewTasks/{reviewTaskId}/largePreview")
    @Produces({ MediaType.TEXT_HTML })
    public void getReviewTaskAsHtmlLargePreview(
        @PathParam("serviceProviderId") final String serviceProviderId, @PathParam("reviewTaskId") final String reviewTaskId
        ) throws ServletException, IOException, URISyntaxException
    {
        // Start of user code getReviewTaskAsHtmlLargePreview_init
        // End of user code

        final ReviewTask aReviewTask = CMManager.getReviewTask(httpServletRequest, serviceProviderId, reviewTaskId);

        if (aReviewTask != null) {
            httpServletRequest.setAttribute("aReviewTask", aReviewTask);
            // Start of user code getReviewTaskAsHtmlLargePreview_setAttributes
            // End of user code

            RequestDispatcher rd = httpServletRequest.getRequestDispatcher("/co/oslc/refimpl/cm/gen/reviewtasklargepreview.jsp");
            httpServletResponse.addHeader(CMConstants.HDR_OSLC_VERSION, CMConstants.OSLC_VERSION_V2);
            addCORSHeaders(httpServletResponse);
            rd.forward(httpServletRequest, httpServletResponse);
        }

        throw new WebApplicationException(Status.NOT_FOUND);
    }
    @GET
    @Path("changeNotices/{changeNoticeId}")
    @Produces({OslcMediaType.APPLICATION_RDF_XML, OslcMediaType.APPLICATION_JSON_LD, OslcMediaType.TEXT_TURTLE, OslcMediaType.APPLICATION_XML, OslcMediaType.APPLICATION_JSON})
    public ChangeNotice getChangeNotice(
                @PathParam("serviceProviderId") final String serviceProviderId, @PathParam("changeNoticeId") final String changeNoticeId
        ) throws IOException, ServletException, URISyntaxException
    {
        // Start of user code getResource_init
        // End of user code

        final ChangeNotice aChangeNotice = CMManager.getChangeNotice(httpServletRequest, serviceProviderId, changeNoticeId);

        if (aChangeNotice != null) {
            // Start of user code getChangeNotice
            // End of user code
            httpServletResponse.addHeader(CMConstants.HDR_OSLC_VERSION, CMConstants.OSLC_VERSION_V2);
            return aChangeNotice;
        }

        throw new WebApplicationException(Status.NOT_FOUND);
    }

    @GET
    @Path("changeNotices/{changeNoticeId}")
    @Produces({ MediaType.TEXT_HTML })
    public Response getChangeNoticeAsHtml(
        @PathParam("serviceProviderId") final String serviceProviderId, @PathParam("changeNoticeId") final String changeNoticeId
        ) throws ServletException, IOException, URISyntaxException
    {
        // Start of user code getChangeNoticeAsHtml_init
        // End of user code

        final ChangeNotice aChangeNotice = CMManager.getChangeNotice(httpServletRequest, serviceProviderId, changeNoticeId);

        if (aChangeNotice != null) {
            httpServletRequest.setAttribute("aChangeNotice", aChangeNotice);
            // Start of user code getChangeNoticeAsHtml_setAttributes
            // End of user code

            RequestDispatcher rd = httpServletRequest.getRequestDispatcher("/co/oslc/refimpl/cm/gen/changenotice.jsp");
            rd.forward(httpServletRequest,httpServletResponse);
        }

        throw new WebApplicationException(Status.NOT_FOUND);
    }

    @GET
    @Path("changeNotices/{changeNoticeId}")
    @Produces({OslcMediaType.APPLICATION_X_OSLC_COMPACT_XML})
    public Compact getChangeNoticeCompact(
        @PathParam("serviceProviderId") final String serviceProviderId, @PathParam("changeNoticeId") final String changeNoticeId
        ) throws ServletException, IOException, URISyntaxException
    {
        String iconUri = OSLC4JUtils.getPublicURI() + "/images/ui_preview_icon.gif";
        String smallPreviewHintHeight = "10em";
        String smallPreviewHintWidth = "45em";
        String largePreviewHintHeight = "20em";
        String largePreviewHintWidth = "45em";

        // Start of user code getChangeNoticeCompact_init
        //TODO: adjust the preview height & width values from the default values provided above.
        // End of user code

        final ChangeNotice aChangeNotice = CMManager.getChangeNotice(httpServletRequest, serviceProviderId, changeNoticeId);

        if (aChangeNotice != null) {
            final Compact compact = new Compact();

            compact.setAbout(aChangeNotice.getAbout());
            compact.setTitle(aChangeNotice.toString());

            compact.setIcon(new URI(iconUri));

            //Create and set attributes for OSLC preview resource
            final Preview smallPreview = new Preview();
            smallPreview.setHintHeight(smallPreviewHintHeight);
            smallPreview.setHintWidth(smallPreviewHintWidth);
            smallPreview.setDocument(UriBuilder.fromUri(aChangeNotice.getAbout()).path("smallPreview").build());
            compact.setSmallPreview(smallPreview);

            final Preview largePreview = new Preview();
            largePreview.setHintHeight(largePreviewHintHeight);
            largePreview.setHintWidth(largePreviewHintWidth);
            largePreview.setDocument(UriBuilder.fromUri(aChangeNotice.getAbout()).path("largePreview").build());
            compact.setLargePreview(largePreview);

            httpServletResponse.addHeader(CMConstants.HDR_OSLC_VERSION, CMConstants.OSLC_VERSION_V2);
            addCORSHeaders(httpServletResponse);
            return compact;
        }
        throw new WebApplicationException(Status.NOT_FOUND);
    }

    @GET
    @Path("changeNotices/{changeNoticeId}/smallPreview")
    @Produces({ MediaType.TEXT_HTML })
    public void getChangeNoticeAsHtmlSmallPreview(
        @PathParam("serviceProviderId") final String serviceProviderId, @PathParam("changeNoticeId") final String changeNoticeId
        ) throws ServletException, IOException, URISyntaxException
    {
        // Start of user code getChangeNoticeAsHtmlSmallPreview_init
        // End of user code

        final ChangeNotice aChangeNotice = CMManager.getChangeNotice(httpServletRequest, serviceProviderId, changeNoticeId);

        if (aChangeNotice != null) {
            httpServletRequest.setAttribute("aChangeNotice", aChangeNotice);
            // Start of user code getChangeNoticeAsHtmlSmallPreview_setAttributes
            // End of user code

            RequestDispatcher rd = httpServletRequest.getRequestDispatcher("/co/oslc/refimpl/cm/gen/changenoticesmallpreview.jsp");
            httpServletResponse.addHeader(CMConstants.HDR_OSLC_VERSION, CMConstants.OSLC_VERSION_V2);
            addCORSHeaders(httpServletResponse);
            rd.forward(httpServletRequest, httpServletResponse);
        }

        throw new WebApplicationException(Status.NOT_FOUND);
    }

    @GET
    @Path("changeNotices/{changeNoticeId}/largePreview")
    @Produces({ MediaType.TEXT_HTML })
    public void getChangeNoticeAsHtmlLargePreview(
        @PathParam("serviceProviderId") final String serviceProviderId, @PathParam("changeNoticeId") final String changeNoticeId
        ) throws ServletException, IOException, URISyntaxException
    {
        // Start of user code getChangeNoticeAsHtmlLargePreview_init
        // End of user code

        final ChangeNotice aChangeNotice = CMManager.getChangeNotice(httpServletRequest, serviceProviderId, changeNoticeId);

        if (aChangeNotice != null) {
            httpServletRequest.setAttribute("aChangeNotice", aChangeNotice);
            // Start of user code getChangeNoticeAsHtmlLargePreview_setAttributes
            // End of user code

            RequestDispatcher rd = httpServletRequest.getRequestDispatcher("/co/oslc/refimpl/cm/gen/changenoticelargepreview.jsp");
            httpServletResponse.addHeader(CMConstants.HDR_OSLC_VERSION, CMConstants.OSLC_VERSION_V2);
            addCORSHeaders(httpServletResponse);
            rd.forward(httpServletRequest, httpServletResponse);
        }

        throw new WebApplicationException(Status.NOT_FOUND);
    }
    @GET
    @Path("enhancements/{enhancementId}")
    @Produces({OslcMediaType.APPLICATION_RDF_XML, OslcMediaType.APPLICATION_JSON_LD, OslcMediaType.TEXT_TURTLE, OslcMediaType.APPLICATION_XML, OslcMediaType.APPLICATION_JSON})
    public Enhancement getEnhancement(
                @PathParam("serviceProviderId") final String serviceProviderId, @PathParam("enhancementId") final String enhancementId
        ) throws IOException, ServletException, URISyntaxException
    {
        // Start of user code getResource_init
        // End of user code

        final Enhancement aEnhancement = CMManager.getEnhancement(httpServletRequest, serviceProviderId, enhancementId);

        if (aEnhancement != null) {
            // Start of user code getEnhancement
            // End of user code
            httpServletResponse.addHeader(CMConstants.HDR_OSLC_VERSION, CMConstants.OSLC_VERSION_V2);
            return aEnhancement;
        }

        throw new WebApplicationException(Status.NOT_FOUND);
    }

    @GET
    @Path("enhancements/{enhancementId}")
    @Produces({ MediaType.TEXT_HTML })
    public Response getEnhancementAsHtml(
        @PathParam("serviceProviderId") final String serviceProviderId, @PathParam("enhancementId") final String enhancementId
        ) throws ServletException, IOException, URISyntaxException
    {
        // Start of user code getEnhancementAsHtml_init
        // End of user code

        final Enhancement aEnhancement = CMManager.getEnhancement(httpServletRequest, serviceProviderId, enhancementId);

        if (aEnhancement != null) {
            httpServletRequest.setAttribute("aEnhancement", aEnhancement);
            // Start of user code getEnhancementAsHtml_setAttributes
            // End of user code

            RequestDispatcher rd = httpServletRequest.getRequestDispatcher("/co/oslc/refimpl/cm/gen/enhancement.jsp");
            rd.forward(httpServletRequest,httpServletResponse);
        }

        throw new WebApplicationException(Status.NOT_FOUND);
    }

    @GET
    @Path("enhancements/{enhancementId}")
    @Produces({OslcMediaType.APPLICATION_X_OSLC_COMPACT_XML})
    public Compact getEnhancementCompact(
        @PathParam("serviceProviderId") final String serviceProviderId, @PathParam("enhancementId") final String enhancementId
        ) throws ServletException, IOException, URISyntaxException
    {
        String iconUri = OSLC4JUtils.getPublicURI() + "/images/ui_preview_icon.gif";
        String smallPreviewHintHeight = "10em";
        String smallPreviewHintWidth = "45em";
        String largePreviewHintHeight = "20em";
        String largePreviewHintWidth = "45em";

        // Start of user code getEnhancementCompact_init
        //TODO: adjust the preview height & width values from the default values provided above.
        // End of user code

        final Enhancement aEnhancement = CMManager.getEnhancement(httpServletRequest, serviceProviderId, enhancementId);

        if (aEnhancement != null) {
            final Compact compact = new Compact();

            compact.setAbout(aEnhancement.getAbout());
            compact.setTitle(aEnhancement.toString());

            compact.setIcon(new URI(iconUri));

            //Create and set attributes for OSLC preview resource
            final Preview smallPreview = new Preview();
            smallPreview.setHintHeight(smallPreviewHintHeight);
            smallPreview.setHintWidth(smallPreviewHintWidth);
            smallPreview.setDocument(UriBuilder.fromUri(aEnhancement.getAbout()).path("smallPreview").build());
            compact.setSmallPreview(smallPreview);

            final Preview largePreview = new Preview();
            largePreview.setHintHeight(largePreviewHintHeight);
            largePreview.setHintWidth(largePreviewHintWidth);
            largePreview.setDocument(UriBuilder.fromUri(aEnhancement.getAbout()).path("largePreview").build());
            compact.setLargePreview(largePreview);

            httpServletResponse.addHeader(CMConstants.HDR_OSLC_VERSION, CMConstants.OSLC_VERSION_V2);
            addCORSHeaders(httpServletResponse);
            return compact;
        }
        throw new WebApplicationException(Status.NOT_FOUND);
    }

    @GET
    @Path("enhancements/{enhancementId}/smallPreview")
    @Produces({ MediaType.TEXT_HTML })
    public void getEnhancementAsHtmlSmallPreview(
        @PathParam("serviceProviderId") final String serviceProviderId, @PathParam("enhancementId") final String enhancementId
        ) throws ServletException, IOException, URISyntaxException
    {
        // Start of user code getEnhancementAsHtmlSmallPreview_init
        // End of user code

        final Enhancement aEnhancement = CMManager.getEnhancement(httpServletRequest, serviceProviderId, enhancementId);

        if (aEnhancement != null) {
            httpServletRequest.setAttribute("aEnhancement", aEnhancement);
            // Start of user code getEnhancementAsHtmlSmallPreview_setAttributes
            // End of user code

            RequestDispatcher rd = httpServletRequest.getRequestDispatcher("/co/oslc/refimpl/cm/gen/enhancementsmallpreview.jsp");
            httpServletResponse.addHeader(CMConstants.HDR_OSLC_VERSION, CMConstants.OSLC_VERSION_V2);
            addCORSHeaders(httpServletResponse);
            rd.forward(httpServletRequest, httpServletResponse);
        }

        throw new WebApplicationException(Status.NOT_FOUND);
    }

    @GET
    @Path("enhancements/{enhancementId}/largePreview")
    @Produces({ MediaType.TEXT_HTML })
    public void getEnhancementAsHtmlLargePreview(
        @PathParam("serviceProviderId") final String serviceProviderId, @PathParam("enhancementId") final String enhancementId
        ) throws ServletException, IOException, URISyntaxException
    {
        // Start of user code getEnhancementAsHtmlLargePreview_init
        // End of user code

        final Enhancement aEnhancement = CMManager.getEnhancement(httpServletRequest, serviceProviderId, enhancementId);

        if (aEnhancement != null) {
            httpServletRequest.setAttribute("aEnhancement", aEnhancement);
            // Start of user code getEnhancementAsHtmlLargePreview_setAttributes
            // End of user code

            RequestDispatcher rd = httpServletRequest.getRequestDispatcher("/co/oslc/refimpl/cm/gen/enhancementlargepreview.jsp");
            httpServletResponse.addHeader(CMConstants.HDR_OSLC_VERSION, CMConstants.OSLC_VERSION_V2);
            addCORSHeaders(httpServletResponse);
            rd.forward(httpServletRequest, httpServletResponse);
        }

        throw new WebApplicationException(Status.NOT_FOUND);
    }
    @PUT
    @Path("changeRequests/{changeRequestId}")
    @Consumes({OslcMediaType.APPLICATION_RDF_XML, OslcMediaType.APPLICATION_JSON_LD, OslcMediaType.TEXT_TURTLE, OslcMediaType.APPLICATION_XML, OslcMediaType.APPLICATION_JSON })
    public Response updateChangeRequest(
            @HeaderParam("If-Match") final String eTagHeader,
            @PathParam("serviceProviderId") final String serviceProviderId, @PathParam("changeRequestId") final String changeRequestId ,
            final ChangeRequest aResource
        ) throws IOException, ServletException
    {
        // Start of user code updateChangeRequest_init
        // End of user code
        final ChangeRequest originalResource = CMManager.getChangeRequest(httpServletRequest, serviceProviderId, changeRequestId);

        if (originalResource != null) {
            try {
                final String originalETag = CMManager.getETagFromChangeRequest(originalResource);

                if ((eTagHeader == null) || (originalETag.equals(eTagHeader))) {
                    // Start of user code updateChangeRequest
                    // End of user code
                    final ChangeRequest updatedResource = CMManager.updateChangeRequest(httpServletRequest, aResource, serviceProviderId, changeRequestId);
                    httpServletResponse.setHeader("ETag", CMManager.getETagFromChangeRequest(updatedResource));
                    return Response.ok().header(CMConstants.HDR_OSLC_VERSION, CMConstants.OSLC_VERSION_V2).build();
                }
                else {
                    throw new WebApplicationException(Status.PRECONDITION_FAILED);
                }

            } catch (Exception e) {
                e.printStackTrace();
                throw new WebApplicationException(e);
            }

        }
        else {
            throw new WebApplicationException(Status.NOT_FOUND);
        }
    }

    @PUT
    @Path("defects/{defectId}")
    @Consumes({OslcMediaType.APPLICATION_RDF_XML, OslcMediaType.APPLICATION_JSON_LD, OslcMediaType.TEXT_TURTLE, OslcMediaType.APPLICATION_XML, OslcMediaType.APPLICATION_JSON })
    public Response updateDefect(
            @HeaderParam("If-Match") final String eTagHeader,
            @PathParam("serviceProviderId") final String serviceProviderId, @PathParam("defectId") final String defectId ,
            final Defect aResource
        ) throws IOException, ServletException
    {
        // Start of user code updateDefect_init
        // End of user code
        final Defect originalResource = CMManager.getDefect(httpServletRequest, serviceProviderId, defectId);

        if (originalResource != null) {
            try {
                final String originalETag = CMManager.getETagFromDefect(originalResource);

                if ((eTagHeader == null) || (originalETag.equals(eTagHeader))) {
                    // Start of user code updateDefect
                    // End of user code
                    final Defect updatedResource = CMManager.updateDefect(httpServletRequest, aResource, serviceProviderId, defectId);
                    httpServletResponse.setHeader("ETag", CMManager.getETagFromDefect(updatedResource));
                    return Response.ok().header(CMConstants.HDR_OSLC_VERSION, CMConstants.OSLC_VERSION_V2).build();
                }
                else {
                    throw new WebApplicationException(Status.PRECONDITION_FAILED);
                }

            } catch (Exception e) {
                e.printStackTrace();
                throw new WebApplicationException(e);
            }

        }
        else {
            throw new WebApplicationException(Status.NOT_FOUND);
        }
    }

    @PUT
    @Path("tasks/{taskId}")
    @Consumes({OslcMediaType.APPLICATION_RDF_XML, OslcMediaType.APPLICATION_JSON_LD, OslcMediaType.TEXT_TURTLE, OslcMediaType.APPLICATION_XML, OslcMediaType.APPLICATION_JSON })
    public Response updateTask(
            @HeaderParam("If-Match") final String eTagHeader,
            @PathParam("serviceProviderId") final String serviceProviderId, @PathParam("taskId") final String taskId ,
            final Task aResource
        ) throws IOException, ServletException
    {
        // Start of user code updateTask_init
        // End of user code
        final Task originalResource = CMManager.getTask(httpServletRequest, serviceProviderId, taskId);

        if (originalResource != null) {
            try {
                final String originalETag = CMManager.getETagFromTask(originalResource);

                if ((eTagHeader == null) || (originalETag.equals(eTagHeader))) {
                    // Start of user code updateTask
                    // End of user code
                    final Task updatedResource = CMManager.updateTask(httpServletRequest, aResource, serviceProviderId, taskId);
                    httpServletResponse.setHeader("ETag", CMManager.getETagFromTask(updatedResource));
                    return Response.ok().header(CMConstants.HDR_OSLC_VERSION, CMConstants.OSLC_VERSION_V2).build();
                }
                else {
                    throw new WebApplicationException(Status.PRECONDITION_FAILED);
                }

            } catch (Exception e) {
                e.printStackTrace();
                throw new WebApplicationException(e);
            }

        }
        else {
            throw new WebApplicationException(Status.NOT_FOUND);
        }
    }

    @PUT
    @Path("reviewTasks/{reviewTaskId}")
    @Consumes({OslcMediaType.APPLICATION_RDF_XML, OslcMediaType.APPLICATION_JSON_LD, OslcMediaType.TEXT_TURTLE, OslcMediaType.APPLICATION_XML, OslcMediaType.APPLICATION_JSON })
    public Response updateReviewTask(
            @HeaderParam("If-Match") final String eTagHeader,
            @PathParam("serviceProviderId") final String serviceProviderId, @PathParam("reviewTaskId") final String reviewTaskId ,
            final ReviewTask aResource
        ) throws IOException, ServletException
    {
        // Start of user code updateReviewTask_init
        // End of user code
        final ReviewTask originalResource = CMManager.getReviewTask(httpServletRequest, serviceProviderId, reviewTaskId);

        if (originalResource != null) {
            try {
                final String originalETag = CMManager.getETagFromReviewTask(originalResource);

                if ((eTagHeader == null) || (originalETag.equals(eTagHeader))) {
                    // Start of user code updateReviewTask
                    // End of user code
                    final ReviewTask updatedResource = CMManager.updateReviewTask(httpServletRequest, aResource, serviceProviderId, reviewTaskId);
                    httpServletResponse.setHeader("ETag", CMManager.getETagFromReviewTask(updatedResource));
                    return Response.ok().header(CMConstants.HDR_OSLC_VERSION, CMConstants.OSLC_VERSION_V2).build();
                }
                else {
                    throw new WebApplicationException(Status.PRECONDITION_FAILED);
                }

            } catch (Exception e) {
                e.printStackTrace();
                throw new WebApplicationException(e);
            }

        }
        else {
            throw new WebApplicationException(Status.NOT_FOUND);
        }
    }

    @PUT
    @Path("changeNotices/{changeNoticeId}")
    @Consumes({OslcMediaType.APPLICATION_RDF_XML, OslcMediaType.APPLICATION_JSON_LD, OslcMediaType.TEXT_TURTLE, OslcMediaType.APPLICATION_XML, OslcMediaType.APPLICATION_JSON })
    public Response updateChangeNotice(
            @HeaderParam("If-Match") final String eTagHeader,
            @PathParam("serviceProviderId") final String serviceProviderId, @PathParam("changeNoticeId") final String changeNoticeId ,
            final ChangeNotice aResource
        ) throws IOException, ServletException
    {
        // Start of user code updateChangeNotice_init
        // End of user code
        final ChangeNotice originalResource = CMManager.getChangeNotice(httpServletRequest, serviceProviderId, changeNoticeId);

        if (originalResource != null) {
            try {
                final String originalETag = CMManager.getETagFromChangeNotice(originalResource);

                if ((eTagHeader == null) || (originalETag.equals(eTagHeader))) {
                    // Start of user code updateChangeNotice
                    // End of user code
                    final ChangeNotice updatedResource = CMManager.updateChangeNotice(httpServletRequest, aResource, serviceProviderId, changeNoticeId);
                    httpServletResponse.setHeader("ETag", CMManager.getETagFromChangeNotice(updatedResource));
                    return Response.ok().header(CMConstants.HDR_OSLC_VERSION, CMConstants.OSLC_VERSION_V2).build();
                }
                else {
                    throw new WebApplicationException(Status.PRECONDITION_FAILED);
                }

            } catch (Exception e) {
                e.printStackTrace();
                throw new WebApplicationException(e);
            }

        }
        else {
            throw new WebApplicationException(Status.NOT_FOUND);
        }
    }

    @PUT
    @Path("enhancements/{enhancementId}")
    @Consumes({OslcMediaType.APPLICATION_RDF_XML, OslcMediaType.APPLICATION_JSON_LD, OslcMediaType.TEXT_TURTLE, OslcMediaType.APPLICATION_XML, OslcMediaType.APPLICATION_JSON })
    public Response updateEnhancement(
            @HeaderParam("If-Match") final String eTagHeader,
            @PathParam("serviceProviderId") final String serviceProviderId, @PathParam("enhancementId") final String enhancementId ,
            final Enhancement aResource
        ) throws IOException, ServletException
    {
        // Start of user code updateEnhancement_init
        // End of user code
        final Enhancement originalResource = CMManager.getEnhancement(httpServletRequest, serviceProviderId, enhancementId);

        if (originalResource != null) {
            try {
                final String originalETag = CMManager.getETagFromEnhancement(originalResource);

                if ((eTagHeader == null) || (originalETag.equals(eTagHeader))) {
                    // Start of user code updateEnhancement
                    // End of user code
                    final Enhancement updatedResource = CMManager.updateEnhancement(httpServletRequest, aResource, serviceProviderId, enhancementId);
                    httpServletResponse.setHeader("ETag", CMManager.getETagFromEnhancement(updatedResource));
                    return Response.ok().header(CMConstants.HDR_OSLC_VERSION, CMConstants.OSLC_VERSION_V2).build();
                }
                else {
                    throw new WebApplicationException(Status.PRECONDITION_FAILED);
                }

            } catch (Exception e) {
                e.printStackTrace();
                throw new WebApplicationException(e);
            }

        }
        else {
            throw new WebApplicationException(Status.NOT_FOUND);
        }
    }

}
