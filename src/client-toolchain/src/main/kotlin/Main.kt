import kotlinx.coroutines.Deferred
import kotlinx.coroutines.GlobalScope
import kotlinx.coroutines.async
import kotlinx.coroutines.awaitAll
import kotlinx.coroutines.runBlocking
import org.eclipse.lyo.oslc.domains.rm.Requirement
import org.eclipse.lyo.oslc4j.client.OslcClient
import org.eclipse.lyo.oslc4j.core.model.CreationFactory
import org.eclipse.lyo.oslc4j.core.model.Link
import org.eclipse.lyo.oslc4j.core.model.ServiceProvider
import org.eclipse.lyo.oslc4j.core.model.ServiceProviderCatalog
import java.net.URI
import java.util.Date
import javax.ws.rs.core.Response
import kotlin.system.measureTimeMillis

fun main() {
    println("Populating OSLC RefImpl servers with sample data.\n")
    val client = OslcClient()
    val rm_spc = "http://localhost:8800/services/catalog/singleton"

    val rmCatalog = client.getResource(rm_spc, ServiceProviderCatalog::class.java)

    println("Fetched the ${rmCatalog.title}")

    val spUris = rmCatalog.serviceProviders.map { it.about }
    val providers = client.getResources(spUris, ServiceProvider::class.java)

    providers.forEach { sp ->
        println("-> contains ${sp.title}")
        sp.services.forEach { s ->
            println("   -> contains a Service with (CF filter):")
            s.creationFactories.forEach { cf ->
                println("      -> ${cf.label}")
                cf.resourceShapes.forEach {
                    println("        ~> ${it} shape")
                }
                cf.resourceTypes.forEach {
                    println("        ~> ${it} type")
                    if (it == URI.create("http://open-services.net/ns/rm#Requirement")) {
                        var requirements: Set<Link>? = HashSet()
                        val timeCF = measureTimeMillis {
                            requirements = postRequirements(client, cf, sp, 50)
                        }
                        println("Created 50 Requirements in $timeCF ms")
                        var resources: MutableList<Requirement>? = null
                        val timeGet = measureTimeMillis {
                            resources = client.getResources(requirements, Requirement::class.java)
                        }
                        println("Fetched 50 Requirements in $timeGet ms")
                        resources?.forEach {
                            println("Fetched ${it.shortTitle}")
                        }
                    }
                }
            }
            // s.queryCapabilities.each {
            //   println("      -> ${it.label}")
            // }
            // s.selectionDialogs.each {
            //   println("      -> ${it.label}")
            // }
            // s.creationDialogs.each {
            //   println("      -> ${it.label}")
            // }
        }
    }

}


fun postRequirements(client: OslcClient, cf: CreationFactory, sp: ServiceProvider, count: Int): Set<Link> {
    val createdUrls = HashSet<Link>()
    val requirements: List<Requirement> = (1..count).map { genRequirement(sp, it) }
    val responsesAsync: List<Deferred<Pair<Response, Requirement>>> = requirements.map { requirement ->
        GlobalScope.async {
            Pair(client.createResource(cf.creation.toString(), requirement, "text/turtle"), requirement)
        }
    }
    runBlocking {
        val responses: List<Pair<Response, Requirement>> = responsesAsync.awaitAll()
        responses.forEach { (response, requirement) ->
            if (response.status < 400) {
                val headers = response.headers
                val newUrl: String? = headers["Location"]?.single() as String
                if(newUrl != null) {
                    createdUrls.add(Link(URI.create(newUrl), requirement.title))
                    println("${requirement.shortTitle} created at ${newUrl}")
                }
            } else {
                println("Failed to create ${requirement.identifier}")
            }
        }
    }
    return createdUrls
}

fun genRequirement(sp: ServiceProvider, id: Int): Requirement {
    val r = Requirement()
    r.apply {
        shortTitle = "${sp.identifier.toUpperCase()}-$id"
        identifier = "req_$id"
        title = "Requirement no. $id"
        description = "Requirement no. $id was generated by a Groovy script 'populate.groovy'. Edit the script to change how these resources look."
        modified = Date()
    }
    return r
}
