@GrabResolver(name = 'lyo', root = 'https://repo.eclipse.org/content/repositories/lyo-releases/')
@GrabResolver(name = 'lyo-snapshots', root = 'https://repo.eclipse.org/content/repositories/lyo-snapshots/')
@Grab(group = 'org.eclipse.lyo.oslc4j.core', module = 'oslc4j-core', version = '4.0.0-SNAPSHOT')
@Grab(group = 'org.eclipse.lyo.oslc4j.core', module = 'oslc4j-jena-provider', version = '4.0.0-SNAPSHOT')
@Grab(group = 'org.eclipse.lyo.clients', module = 'oslc4j-client', version = '4.0.0-SNAPSHOT')
@Grab('org.glassfish.jersey.core:jersey-client:2.25.1')
@Grab(group = 'org.slf4j', module = 'slf4j-simple', version = '1.7.25')

import javax.ws.rs.core.Response
import org.eclipse.lyo.oslc4j.client.OslcClient
import org.eclipse.lyo.oslc4j.client.resources.Requirement
import org.eclipse.lyo.oslc4j.core.model.CreationFactory
import org.eclipse.lyo.oslc4j.core.model.ServiceProvider
import org.eclipse.lyo.oslc4j.core.model.ServiceProviderCatalog
import org.eclipse.lyo.oslc4j.provider.jena.JenaModelHelper

println("Populating OSLC RefImpl servers with sample data.\n")

def client = new OslcClient()

def rm_spc = 'http://localhost:8800/services/catalog/singleton'

def rm_sp = client.lookupServiceProviderUrl(rm_spc, "Default ServiceProvider")
def response = client.getResource(rm_spc)
def rm_spc_entity = response.readEntity(ServiceProviderCatalog.class)

println("Fetched the ${rm_spc_entity.title}")
rm_spc_entity.serviceProviders.each { sp ->
  println("-> contains ${sp.title}")
  ServiceProvider serviceProvider = getEntity(client, sp.about, ServiceProvider.class)
  serviceProvider.services.each { s ->
    println("   -> contains a Service with (CF filter):")
    s.creationFactories.each { CreationFactory cf ->
      println("      -> ${cf.label}")
      cf.resourceShapes.each {
        println("        ~> ${it} shape")
      }
      cf.resourceTypes.each {
        println("        ~> ${it} type")
        if (it == URI.create("http://open-services.net/ns/rm#Requirement")) {
          postRequirements(client, cf, serviceProvider, 50)
        }
      }
    }
    // s.queryCapabilities.each {
    //   println("      -> ${it.label}")
    // }
    // s.selectionDialogs.each {
    //   println("      -> ${it.label}")
    // }
    // s.creationDialogs.each {
    //   println("      -> ${it.label}")
    // }
  }
}

static def <T> T getEntity(OslcClient client, URI u, Class<T> clazz) {
  def response = client.getResource(u.toString())
  response.readEntity(clazz)
}

void postRequirements(OslcClient client, CreationFactory cf, ServiceProvider sp, Integer count) {
  for (id in 1..count) {
    Requirement requirement = genRequirement(sp, id)
    client.createResource(cf.creation.toString(), requirement, "text/turtle")
    println("Created ${requirement.shortTitle}")
  }
}

Requirement genRequirement(ServiceProvider sp, Integer id) {
  Requirement r = new Requirement()
  r.with {
    shortTitle = "${sp.identifier.toUpperCase()}-$id"
    identifier = "req_$id"
    title = "Requirement no. $id"
    description = "Requirement no. $id was generated by a Groovy script 'populate.groovy'. Edit the script to change how these resources look."
    modified = new Date()
  }
  return r
}
